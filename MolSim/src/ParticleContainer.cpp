//
// Created by maraconda on 02.11.23.
//

#include <iostream>
#include <vector>
#include <functional>
#include "ParticleContainer.h"

ParticleContainer::ParticleContainer() {
    std::cout << "Empty Particle Container generated!" << std::endl;
}

ParticleContainer::ParticleContainer(const ParticleContainer &other) {
    containedParticles = other.containedParticles;
    std::cout << "Particle Container generated by copy!" << std::endl;
}

ParticleContainer::~ParticleContainer() { std::cout << "Particle Container destructed!" << std::endl; }

void ParticleContainer::addParticle(const Particle &particle) {
    const Particle& new_particle(particle);
    containedParticles.emplace_back(new_particle);
    std::cout << "Added copy of particle to container!" << std::endl;
}

void ParticleContainer::addParticle(int type_arg) {
    Particle new_particle(type_arg);
    containedParticles.emplace_back(new_particle);
    std::cout << "Added newly created particle to container!" << std::endl;
}

void ParticleContainer::addParticle(std::array<double, 3> x_arg, std::array<double, 3> v_arg, double m_arg, int type_arg) {
    Particle new_particle(x_arg, v_arg, m_arg, type_arg);
    containedParticles.emplace_back(new_particle);
    std::cout << "Added newly created particle to container!" << std::endl;
    containedParticles.begin();
}

void ParticleContainer::addParticleContainer(ParticleContainer &container) {
    for (auto &p: container) {
        containedParticles.emplace_back(p);
    }
    std::cout << "Added particles contained in other container to this container!" << std::endl;
}

void ParticleContainer::applyForce(const std::function<void()>& forceCalculation){

}

std::vector<Particle>::iterator ParticleContainer::begin() {
    return containedParticles.begin();
}

std::vector<Particle>::iterator ParticleContainer::end() {
    return containedParticles.end();
}

int ParticleContainer::size() {
    return containedParticles.size();
}
