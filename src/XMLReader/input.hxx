// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef INPUT_HXX
#define INPUT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class cuboid_t;
class sphere_t;
class vector_t;
class vector_i;
class boundary_t;
class shape_t;
class directSum_t;
class linkedCell_t;
class strategy_t;
class simulation_t;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class cuboid_t: public ::xml_schema::type
{
  public:
  // Position
  //
  typedef ::vector_t Position_type;
  typedef ::xsd::cxx::tree::traits< Position_type, char > Position_traits;

  const Position_type&
  Position () const;

  Position_type&
  Position ();

  void
  Position (const Position_type& x);

  void
  Position (::std::auto_ptr< Position_type > p);

  // Velocity
  //
  typedef ::vector_t Velocity_type;
  typedef ::xsd::cxx::tree::traits< Velocity_type, char > Velocity_traits;

  const Velocity_type&
  Velocity () const;

  Velocity_type&
  Velocity ();

  void
  Velocity (const Velocity_type& x);

  void
  Velocity (::std::auto_ptr< Velocity_type > p);

  // Dimension
  //
  typedef ::vector_i Dimension_type;
  typedef ::xsd::cxx::tree::traits< Dimension_type, char > Dimension_traits;

  const Dimension_type&
  Dimension () const;

  Dimension_type&
  Dimension ();

  void
  Dimension (const Dimension_type& x);

  void
  Dimension (::std::auto_ptr< Dimension_type > p);

  // distance
  //
  typedef ::xml_schema::double_ distance_type;
  typedef ::xsd::cxx::tree::traits< distance_type, char, ::xsd::cxx::tree::schema_type::double_ > distance_traits;

  const distance_type&
  distance () const;

  distance_type&
  distance ();

  void
  distance (const distance_type& x);

  // mass
  //
  typedef ::xml_schema::double_ mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  // type
  //
  typedef ::xml_schema::non_negative_integer type_type;
  typedef ::xsd::cxx::tree::optional< type_type > type_optional;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_optional&
  type () const;

  type_optional&
  type ();

  void
  type (const type_type& x);

  void
  type (const type_optional& x);

  // Constructors.
  //
  cuboid_t (const Position_type&,
            const Velocity_type&,
            const Dimension_type&,
            const distance_type&,
            const mass_type&);

  cuboid_t (::std::auto_ptr< Position_type >,
            ::std::auto_ptr< Velocity_type >,
            ::std::auto_ptr< Dimension_type >,
            const distance_type&,
            const mass_type&);

  cuboid_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  cuboid_t (const cuboid_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual cuboid_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  cuboid_t&
  operator= (const cuboid_t& x);

  virtual 
  ~cuboid_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Position_type > Position_;
  ::xsd::cxx::tree::one< Velocity_type > Velocity_;
  ::xsd::cxx::tree::one< Dimension_type > Dimension_;
  ::xsd::cxx::tree::one< distance_type > distance_;
  ::xsd::cxx::tree::one< mass_type > mass_;
  type_optional type_;
};

class sphere_t: public ::xml_schema::type
{
  public:
  // Center
  //
  typedef ::vector_t Center_type;
  typedef ::xsd::cxx::tree::traits< Center_type, char > Center_traits;

  const Center_type&
  Center () const;

  Center_type&
  Center ();

  void
  Center (const Center_type& x);

  void
  Center (::std::auto_ptr< Center_type > p);

  // Velocity
  //
  typedef ::vector_t Velocity_type;
  typedef ::xsd::cxx::tree::traits< Velocity_type, char > Velocity_traits;

  const Velocity_type&
  Velocity () const;

  Velocity_type&
  Velocity ();

  void
  Velocity (const Velocity_type& x);

  void
  Velocity (::std::auto_ptr< Velocity_type > p);

  // radius
  //
  typedef ::xml_schema::non_negative_integer radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  // distance
  //
  typedef ::xml_schema::double_ distance_type;
  typedef ::xsd::cxx::tree::traits< distance_type, char, ::xsd::cxx::tree::schema_type::double_ > distance_traits;

  const distance_type&
  distance () const;

  distance_type&
  distance ();

  void
  distance (const distance_type& x);

  // mass
  //
  typedef ::xml_schema::double_ mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  // type
  //
  typedef ::xml_schema::non_negative_integer type_type;
  typedef ::xsd::cxx::tree::optional< type_type > type_optional;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_optional&
  type () const;

  type_optional&
  type ();

  void
  type (const type_type& x);

  void
  type (const type_optional& x);

  // Constructors.
  //
  sphere_t (const Center_type&,
            const Velocity_type&,
            const radius_type&,
            const distance_type&,
            const mass_type&);

  sphere_t (::std::auto_ptr< Center_type >,
            ::std::auto_ptr< Velocity_type >,
            const radius_type&,
            const distance_type&,
            const mass_type&);

  sphere_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  sphere_t (const sphere_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual sphere_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  sphere_t&
  operator= (const sphere_t& x);

  virtual 
  ~sphere_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Center_type > Center_;
  ::xsd::cxx::tree::one< Velocity_type > Velocity_;
  ::xsd::cxx::tree::one< radius_type > radius_;
  ::xsd::cxx::tree::one< distance_type > distance_;
  ::xsd::cxx::tree::one< mass_type > mass_;
  type_optional type_;
};

class vector_t: public ::xml_schema::type
{
  public:
  // x
  //
  typedef ::xml_schema::double_ x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char, ::xsd::cxx::tree::schema_type::double_ > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::double_ y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char, ::xsd::cxx::tree::schema_type::double_ > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  //
  typedef ::xml_schema::double_ z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char, ::xsd::cxx::tree::schema_type::double_ > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // Constructors.
  //
  vector_t (const x_type&,
            const y_type&,
            const z_type&);

  vector_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  vector_t (const vector_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual vector_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  vector_t&
  operator= (const vector_t& x);

  virtual 
  ~vector_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
};

class vector_i: public ::xml_schema::type
{
  public:
  // x
  //
  typedef ::xml_schema::int_ x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::int_ y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  //
  typedef ::xml_schema::int_ z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // Constructors.
  //
  vector_i (const x_type&,
            const y_type&,
            const z_type&);

  vector_i (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  vector_i (const vector_i& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual vector_i*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  vector_i&
  operator= (const vector_i& x);

  virtual 
  ~vector_i ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
};

class boundary_t: public ::xml_schema::type
{
  public:
  // boundary
  //
  typedef ::xml_schema::string boundary_type;
  typedef ::xsd::cxx::tree::optional< boundary_type > boundary_optional;
  typedef ::xsd::cxx::tree::traits< boundary_type, char > boundary_traits;

  const boundary_optional&
  boundary () const;

  boundary_optional&
  boundary ();

  void
  boundary (const boundary_type& x);

  void
  boundary (const boundary_optional& x);

  void
  boundary (::std::auto_ptr< boundary_type > p);

  // boundary-right
  //
  typedef ::xml_schema::string boundary_right_type;
  typedef ::xsd::cxx::tree::optional< boundary_right_type > boundary_right_optional;
  typedef ::xsd::cxx::tree::traits< boundary_right_type, char > boundary_right_traits;

  const boundary_right_optional&
  boundary_right () const;

  boundary_right_optional&
  boundary_right ();

  void
  boundary_right (const boundary_right_type& x);

  void
  boundary_right (const boundary_right_optional& x);

  void
  boundary_right (::std::auto_ptr< boundary_right_type > p);

  // boundary-left
  //
  typedef ::xml_schema::string boundary_left_type;
  typedef ::xsd::cxx::tree::optional< boundary_left_type > boundary_left_optional;
  typedef ::xsd::cxx::tree::traits< boundary_left_type, char > boundary_left_traits;

  const boundary_left_optional&
  boundary_left () const;

  boundary_left_optional&
  boundary_left ();

  void
  boundary_left (const boundary_left_type& x);

  void
  boundary_left (const boundary_left_optional& x);

  void
  boundary_left (::std::auto_ptr< boundary_left_type > p);

  // boundary-top
  //
  typedef ::xml_schema::string boundary_top_type;
  typedef ::xsd::cxx::tree::optional< boundary_top_type > boundary_top_optional;
  typedef ::xsd::cxx::tree::traits< boundary_top_type, char > boundary_top_traits;

  const boundary_top_optional&
  boundary_top () const;

  boundary_top_optional&
  boundary_top ();

  void
  boundary_top (const boundary_top_type& x);

  void
  boundary_top (const boundary_top_optional& x);

  void
  boundary_top (::std::auto_ptr< boundary_top_type > p);

  // boundary-bottom
  //
  typedef ::xml_schema::string boundary_bottom_type;
  typedef ::xsd::cxx::tree::optional< boundary_bottom_type > boundary_bottom_optional;
  typedef ::xsd::cxx::tree::traits< boundary_bottom_type, char > boundary_bottom_traits;

  const boundary_bottom_optional&
  boundary_bottom () const;

  boundary_bottom_optional&
  boundary_bottom ();

  void
  boundary_bottom (const boundary_bottom_type& x);

  void
  boundary_bottom (const boundary_bottom_optional& x);

  void
  boundary_bottom (::std::auto_ptr< boundary_bottom_type > p);

  // boundary-back
  //
  typedef ::xml_schema::string boundary_back_type;
  typedef ::xsd::cxx::tree::optional< boundary_back_type > boundary_back_optional;
  typedef ::xsd::cxx::tree::traits< boundary_back_type, char > boundary_back_traits;

  const boundary_back_optional&
  boundary_back () const;

  boundary_back_optional&
  boundary_back ();

  void
  boundary_back (const boundary_back_type& x);

  void
  boundary_back (const boundary_back_optional& x);

  void
  boundary_back (::std::auto_ptr< boundary_back_type > p);

  // boundary-front
  //
  typedef ::xml_schema::string boundary_front_type;
  typedef ::xsd::cxx::tree::optional< boundary_front_type > boundary_front_optional;
  typedef ::xsd::cxx::tree::traits< boundary_front_type, char > boundary_front_traits;

  const boundary_front_optional&
  boundary_front () const;

  boundary_front_optional&
  boundary_front ();

  void
  boundary_front (const boundary_front_type& x);

  void
  boundary_front (const boundary_front_optional& x);

  void
  boundary_front (::std::auto_ptr< boundary_front_type > p);

  // Constructors.
  //
  boundary_t ();

  boundary_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  boundary_t (const boundary_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual boundary_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  boundary_t&
  operator= (const boundary_t& x);

  virtual 
  ~boundary_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  boundary_optional boundary_;
  boundary_right_optional boundary_right_;
  boundary_left_optional boundary_left_;
  boundary_top_optional boundary_top_;
  boundary_bottom_optional boundary_bottom_;
  boundary_back_optional boundary_back_;
  boundary_front_optional boundary_front_;
};

class shape_t: public ::xml_schema::type
{
  public:
  // Cuboid
  //
  typedef ::cuboid_t Cuboid_type;
  typedef ::xsd::cxx::tree::sequence< Cuboid_type > Cuboid_sequence;
  typedef Cuboid_sequence::iterator Cuboid_iterator;
  typedef Cuboid_sequence::const_iterator Cuboid_const_iterator;
  typedef ::xsd::cxx::tree::traits< Cuboid_type, char > Cuboid_traits;

  const Cuboid_sequence&
  Cuboid () const;

  Cuboid_sequence&
  Cuboid ();

  void
  Cuboid (const Cuboid_sequence& s);

  // Sphere
  //
  typedef ::sphere_t Sphere_type;
  typedef ::xsd::cxx::tree::sequence< Sphere_type > Sphere_sequence;
  typedef Sphere_sequence::iterator Sphere_iterator;
  typedef Sphere_sequence::const_iterator Sphere_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sphere_type, char > Sphere_traits;

  const Sphere_sequence&
  Sphere () const;

  Sphere_sequence&
  Sphere ();

  void
  Sphere (const Sphere_sequence& s);

  // Constructors.
  //
  shape_t ();

  shape_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  shape_t (const shape_t& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual shape_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  shape_t&
  operator= (const shape_t& x);

  virtual 
  ~shape_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Cuboid_sequence Cuboid_;
  Sphere_sequence Sphere_;
};

class directSum_t: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  directSum_t ();

  directSum_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  directSum_t (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  directSum_t (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  directSum_t (const directSum_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual directSum_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~directSum_t ();
};

class linkedCell_t: public ::xml_schema::type
{
  public:
  // Boundary
  //
  typedef ::boundary_t Boundary_type;
  typedef ::xsd::cxx::tree::traits< Boundary_type, char > Boundary_traits;

  const Boundary_type&
  Boundary () const;

  Boundary_type&
  Boundary ();

  void
  Boundary (const Boundary_type& x);

  void
  Boundary (::std::auto_ptr< Boundary_type > p);

  // Domain
  //
  typedef ::vector_t Domain_type;
  typedef ::xsd::cxx::tree::traits< Domain_type, char > Domain_traits;

  const Domain_type&
  Domain () const;

  Domain_type&
  Domain ();

  void
  Domain (const Domain_type& x);

  void
  Domain (::std::auto_ptr< Domain_type > p);

  // cutoff
  //
  typedef ::xml_schema::double_ cutoff_type;
  typedef ::xsd::cxx::tree::traits< cutoff_type, char, ::xsd::cxx::tree::schema_type::double_ > cutoff_traits;

  const cutoff_type&
  cutoff () const;

  cutoff_type&
  cutoff ();

  void
  cutoff (const cutoff_type& x);

  // Constructors.
  //
  linkedCell_t (const Boundary_type&,
                const Domain_type&,
                const cutoff_type&);

  linkedCell_t (::std::auto_ptr< Boundary_type >,
                ::std::auto_ptr< Domain_type >,
                const cutoff_type&);

  linkedCell_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  linkedCell_t (const linkedCell_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual linkedCell_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  linkedCell_t&
  operator= (const linkedCell_t& x);

  virtual 
  ~linkedCell_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Boundary_type > Boundary_;
  ::xsd::cxx::tree::one< Domain_type > Domain_;
  ::xsd::cxx::tree::one< cutoff_type > cutoff_;
};

class strategy_t: public ::xml_schema::type
{
  public:
  // LinkedCell
  //
  typedef ::linkedCell_t LinkedCell_type;
  typedef ::xsd::cxx::tree::optional< LinkedCell_type > LinkedCell_optional;
  typedef ::xsd::cxx::tree::traits< LinkedCell_type, char > LinkedCell_traits;

  const LinkedCell_optional&
  LinkedCell () const;

  LinkedCell_optional&
  LinkedCell ();

  void
  LinkedCell (const LinkedCell_type& x);

  void
  LinkedCell (const LinkedCell_optional& x);

  void
  LinkedCell (::std::auto_ptr< LinkedCell_type > p);

  // DirectSum
  //
  typedef ::directSum_t DirectSum_type;
  typedef ::xsd::cxx::tree::optional< DirectSum_type > DirectSum_optional;
  typedef ::xsd::cxx::tree::traits< DirectSum_type, char > DirectSum_traits;

  const DirectSum_optional&
  DirectSum () const;

  DirectSum_optional&
  DirectSum ();

  void
  DirectSum (const DirectSum_type& x);

  void
  DirectSum (const DirectSum_optional& x);

  void
  DirectSum (::std::auto_ptr< DirectSum_type > p);

  // Constructors.
  //
  strategy_t ();

  strategy_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  strategy_t (const strategy_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual strategy_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  strategy_t&
  operator= (const strategy_t& x);

  virtual 
  ~strategy_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LinkedCell_optional LinkedCell_;
  DirectSum_optional DirectSum_;
};

class simulation_t: public ::xml_schema::type
{
  public:
  // Shapes
  //
  typedef ::shape_t Shapes_type;
  typedef ::xsd::cxx::tree::sequence< Shapes_type > Shapes_sequence;
  typedef Shapes_sequence::iterator Shapes_iterator;
  typedef Shapes_sequence::const_iterator Shapes_const_iterator;
  typedef ::xsd::cxx::tree::traits< Shapes_type, char > Shapes_traits;

  const Shapes_sequence&
  Shapes () const;

  Shapes_sequence&
  Shapes ();

  void
  Shapes (const Shapes_sequence& s);

  // Strategy
  //
  typedef ::strategy_t Strategy_type;
  typedef ::xsd::cxx::tree::traits< Strategy_type, char > Strategy_traits;

  const Strategy_type&
  Strategy () const;

  Strategy_type&
  Strategy ();

  void
  Strategy (const Strategy_type& x);

  void
  Strategy (::std::auto_ptr< Strategy_type > p);

  // endTime
  //
  typedef ::xml_schema::double_ endTime_type;
  typedef ::xsd::cxx::tree::traits< endTime_type, char, ::xsd::cxx::tree::schema_type::double_ > endTime_traits;

  const endTime_type&
  endTime () const;

  endTime_type&
  endTime ();

  void
  endTime (const endTime_type& x);

  // deltaT
  //
  typedef ::xml_schema::double_ deltaT_type;
  typedef ::xsd::cxx::tree::traits< deltaT_type, char, ::xsd::cxx::tree::schema_type::double_ > deltaT_traits;

  const deltaT_type&
  deltaT () const;

  deltaT_type&
  deltaT ();

  void
  deltaT (const deltaT_type& x);

  // logLevel
  //
  typedef ::xml_schema::string logLevel_type;
  typedef ::xsd::cxx::tree::optional< logLevel_type > logLevel_optional;
  typedef ::xsd::cxx::tree::traits< logLevel_type, char > logLevel_traits;

  const logLevel_optional&
  logLevel () const;

  logLevel_optional&
  logLevel ();

  void
  logLevel (const logLevel_type& x);

  void
  logLevel (const logLevel_optional& x);

  void
  logLevel (::std::auto_ptr< logLevel_type > p);

  // Constructors.
  //
  simulation_t (const Strategy_type&,
                const endTime_type&,
                const deltaT_type&);

  simulation_t (::std::auto_ptr< Strategy_type >,
                const endTime_type&,
                const deltaT_type&);

  simulation_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  simulation_t (const simulation_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual simulation_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  simulation_t&
  operator= (const simulation_t& x);

  virtual 
  ~simulation_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Shapes_sequence Shapes_;
  ::xsd::cxx::tree::one< Strategy_type > Strategy_;
  ::xsd::cxx::tree::one< endTime_type > endTime_;
  ::xsd::cxx::tree::one< deltaT_type > deltaT_;
  logLevel_optional logLevel_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::simulation_t >
Simulation (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
Simulation (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
Simulation (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::simulation_t >
Simulation (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
Simulation (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
Simulation (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
Simulation (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
Simulation (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
Simulation (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::simulation_t >
Simulation (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
Simulation (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
Simulation (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::simulation_t >
Simulation (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
Simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const cuboid_t&);

void
operator<< (::xercesc::DOMElement&, const sphere_t&);

void
operator<< (::xercesc::DOMElement&, const vector_t&);

void
operator<< (::xercesc::DOMElement&, const vector_i&);

void
operator<< (::xercesc::DOMElement&, const boundary_t&);

void
operator<< (::xercesc::DOMElement&, const shape_t&);

void
operator<< (::xercesc::DOMElement&, const directSum_t&);

void
operator<< (::xercesc::DOMAttr&, const directSum_t&);

void
operator<< (::xml_schema::list_stream&,
            const directSum_t&);

void
operator<< (::xercesc::DOMElement&, const linkedCell_t&);

void
operator<< (::xercesc::DOMElement&, const strategy_t&);

void
operator<< (::xercesc::DOMElement&, const simulation_t&);

// Serialize to std::ostream.
//

void
Simulation (::std::ostream& os,
            const ::simulation_t& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

void
Simulation (::std::ostream& os,
            const ::simulation_t& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

void
Simulation (::std::ostream& os,
            const ::simulation_t& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
Simulation (::xercesc::XMLFormatTarget& ft,
            const ::simulation_t& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

void
Simulation (::xercesc::XMLFormatTarget& ft,
            const ::simulation_t& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

void
Simulation (::xercesc::XMLFormatTarget& ft,
            const ::simulation_t& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
Simulation (::xercesc::DOMDocument& d,
            const ::simulation_t& x,
            ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
Simulation (const ::simulation_t& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // INPUT_HXX
