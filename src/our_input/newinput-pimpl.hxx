// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef NEWINPUT_PIMPL_HXX
#define NEWINPUT_PIMPL_HXX

#include "newinput-pskel.hxx"

class input_parameters_pimpl: public virtual input_parameters_pskel
{
public:
    virtual void
    pre ();

    virtual void
    algorithm_option (const ::std::string&);


    virtual void
    write_frequency (float);

    virtual void
    output_file_param (const ::std::string&);

    virtual void
    log_level (float);

    virtual void
    simulation_input_parameters ();

    virtual void
    input_boundary_options ();

    virtual void
    cuboid_input_parameters ();

    virtual void
    sphere_input_parameters ();

    virtual void
    post_input_parameters ();


    ~input_parameters_pimpl();

    input_parameters_pimpl();

    input_parameters_pimpl(std::string algo,float write_f, std::string outputfilename,float loglevel,
                           simulation_input_parameters_pskel sim,input_boundary_options_pskel
                           boundaries,cuboid_input_parameters_pskel cuboid,
                           sphere_input_parameters_pskel sphere);

    static std::string get_algorithm_option();

    static float get_log_level();

    static float get_write_frequency();

    static std::string get_output_file_name();
};

class simulation_input_parameters_pimpl: public virtual simulation_input_parameters_pskel
{
public:
    ~simulation_input_parameters_pimpl();
    simulation_input_parameters_pimpl();

    simulation_input_parameters_pimpl(dimension_pskel dim, avg_velocity_pskel avgV,
                                      epsilon_pskel eps, delta_t_pskel deltaT,
                                      t_end_pskel tEnd,sigma_pskel sigma,
                                      r_cutoff_pskel rCut,
                                      domain_size_l_pskel domainSizeL);
    virtual void
    pre ();

    virtual void
    dimension ();



    virtual void
    avg_velocity ();




    virtual void
    epsilon ();




    virtual void
    delta_t ();



    virtual void
    t_end ();



    virtual void
    sigma ();



    virtual void
    r_cutoff ();



    virtual void
    domain_size_l ();



    virtual void
    post_simulation_input_parameters ();
};

class input_boundary_options_pimpl: public virtual input_boundary_options_pskel
{

public:
    ~input_boundary_options_pimpl();

    input_boundary_options_pimpl();
    input_boundary_options_pimpl
    (std::string b1,std::string b2,std::string b3, std::string b4,std::string b5,std::string b6);

    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    b1 (const ::std::string&);

    static std::string getB1();

    virtual void
    b2 (const ::std::string&);
    static std::string getB2();

    virtual void
    b3 (const ::std::string&);
    static std::string getB3();

    virtual void
    b4 (const ::std::string&);
    static std::string getB4();

    virtual void
    b5 (const ::std::string&);
    static std::string getB5();

    virtual void
    b6 (const ::std::string&);
    static std::string getB6();

    virtual void
    post_input_boundary_options ();
};

class cuboid_input_parameters_pimpl: public virtual cuboid_input_parameters_pskel
{
public:
    ~cuboid_input_parameters_pimpl();
    cuboid_input_parameters_pimpl();
    cuboid_input_parameters_pimpl(h_pskel,m_pskel,x1_pskel,x2_pskel,
                                  v1_pskel,v2_pskel,N1_pskel,N2_pskel);
    virtual void
    pre ();

    virtual void
    h ();



    virtual void
    m ();



    virtual void
    x1 ();



    virtual void
    x2 ();



    virtual void
    v1 ();



    virtual void
    v2 ();



    virtual void
    N1 ();



    virtual void
    N2 ();



    virtual void
    post_cuboid_input_parameters ();
};

class sphere_input_parameters_pimpl: public virtual sphere_input_parameters_pskel
{
public:
    ~sphere_input_parameters_pimpl();
    sphere_input_parameters_pimpl();
    sphere_input_parameters_pimpl(h_pskel,dimension_pskel,m_pskel,
                                  x_center_pskel,v_pskel);
    virtual void
    pre ();

    virtual void
    h ();


    virtual void
    dimension ();


    virtual void
    m ();



    virtual void
    x_center ();


    virtual void
    v ();



    virtual void
    post_sphere_input_parameters ();
};

class dimension_pimpl: public virtual dimension_pskel
{
public:
    ~dimension_pimpl();
    dimension_pimpl();

    dimension_pimpl(float value);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    value (float);

    static float get_dimension();

    virtual void
    post_dimension ();
};

class avg_velocity_pimpl: public virtual avg_velocity_pskel
{
public:
    ~avg_velocity_pimpl();
    avg_velocity_pimpl();
    avg_velocity_pimpl(float value);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    value (float);

    static float get_avg_velocity();

    virtual void
    post_avg_velocity ();
};

class epsilon_pimpl: public virtual epsilon_pskel
{
public:
    ~epsilon_pimpl();
    epsilon_pimpl();
    epsilon_pimpl(float value);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    value (float);

    static float get_epsilon();

    virtual void
    post_epsilon ();
};

class delta_t_pimpl: public virtual delta_t_pskel
{
public:
    ~delta_t_pimpl();
    delta_t_pimpl();
    delta_t_pimpl(float value);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    value (float);

    static float get_delta_t();

    virtual void
    post_delta_t ();
};

class t_end_pimpl: public virtual t_end_pskel
{
public:
    ~t_end_pimpl();
    t_end_pimpl();
    t_end_pimpl(float value);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    value (float);

    static float get_t_end();

    virtual void
    post_t_end ();
};

class sigma_pimpl: public virtual sigma_pskel
{
public:
    ~sigma_pimpl();
    sigma_pimpl();
    sigma_pimpl(float value);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    value (float);

    static float get_sigma();

    virtual void
    post_sigma ();
};

class r_cutoff_pimpl: public virtual r_cutoff_pskel
{
public:
    ~r_cutoff_pimpl();
    r_cutoff_pimpl();
    r_cutoff_pimpl(float value);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    value (float);

    static float get_r_cutoff();

    virtual void
    post_r_cutoff ();
};

class domain_size_l_pimpl: public virtual domain_size_l_pskel
{
public:
    ~domain_size_l_pimpl();
    domain_size_l_pimpl();
    domain_size_l_pimpl(short x, signed char y, signed char z);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    x (short);

    virtual void
    y (signed char);

    virtual void
    z (signed char);

    static short get_domain_size_x();

    static signed char  get_domain_size_y();

    static signed char get_domain_size_z();


    virtual void
    post_domain_size_l ();
};

class h_pimpl: public virtual h_pskel
{
public:
    ~h_pimpl();
    h_pimpl();
    h_pimpl(float value);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    value (float);

    static float get_h();

    virtual void
    post_h ();
};

class m_pimpl: public virtual m_pskel
{
public:
    ~m_pimpl();
    m_pimpl();
    m_pimpl(float value);

    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    value (float);

    static float get_m();

    virtual void
    post_m ();
};

class x1_pimpl: public virtual x1_pskel
{
public:
    ~x1_pimpl();
    x1_pimpl();
    x1_pimpl(signed char x, signed char y, signed char z);

    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    x (signed char);

    virtual void
    y (signed char);

    virtual void
    z (signed char);

    static signed char get_x1_x();

    static signed char get_x1_y();

    static signed char get_x1_z();

    virtual void
    post_x1 ();
};

class x2_pimpl: public virtual x2_pskel
{
public:
    ~x2_pimpl();
    x2_pimpl();
    x2_pimpl(signed char x, signed char y, signed char z);

    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    x (signed char);

    virtual void
    y (signed char);

    virtual void
    z (signed char);

    static signed char get_x2_x();

    static signed char get_x2_y();

    static signed char get_x2_z();

    virtual void
    post_x2 ();
};

class v1_pimpl: public virtual v1_pskel
{
public:
    ~v1_pimpl();
v1_pimpl();
    v1_pimpl(signed char x, signed char y, signed char z);

    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    x (signed char);

    virtual void
    y (signed char);

    virtual void
    z (signed char);

    static signed char get_v1_x();

    static signed char get_v1_y();

    static signed char get_v1_z();

    virtual void
    post_v1 ();
};

class v2_pimpl: public virtual v2_pskel
{
public:
    ~v2_pimpl();
    v2_pimpl();
    v2_pimpl(signed char x, signed char y, signed char z);

    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    x (signed char);

    virtual void
    y (signed char);

    virtual void
    z (signed char);

    static signed char get_v2_x();

    static signed char get_v2_y();

    static signed char get_v2_z();

    virtual void
    post_v2 ();
};

class N1_pimpl: public virtual N1_pskel
{
public:
    ~N1_pimpl();
    N1_pimpl();
    N1_pimpl(signed char x, signed char y, signed char z);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    x (signed char);

    virtual void
    y (signed char);

    virtual void
    z (signed char);

    static signed char get_n1_x();

    static signed char get_n1_y();

    static signed char get_n1_z();

    virtual void
    post_N1 ();
};

class N2_pimpl: public virtual N2_pskel
{
public:
    ~N2_pimpl();
N2_pimpl();
    N2_pimpl(signed char x, signed char y, signed char z);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    x (signed char);

    virtual void
    y (signed char);

    virtual void
    z (signed char);

    static signed char get_n2_x();

    static signed char get_n2_y();

    static signed char get_n2_z();

    virtual void
    post_N2 ();
};

class x_center_pimpl: public virtual x_center_pskel
{
public:
    ~x_center_pimpl();
x_center_pimpl();
    x_center_pimpl(signed char x, signed char y, signed char z);
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    x (signed char);

    virtual void
    y (signed char);

    virtual void
    z (signed char);


    static signed char get_x_center_x();

    static signed char get_x_center_y();

    static signed char get_x_center_z();

    virtual void
    post_x_center ();
};

class v_pimpl: public virtual v_pskel
{
public:
    ~v_pimpl();
    v_pimpl();
    v_pimpl(signed char x, signed char y, signed char z);

    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    x (signed char);

    virtual void
    y (signed char);

    virtual void
    z (signed char);

    static signed char get_v_x();

    static signed char get_v_y();

    static signed char get_v_z();

    virtual void
    post_v ();
};

#endif // NEWINPUT_PIMPL_HXX
