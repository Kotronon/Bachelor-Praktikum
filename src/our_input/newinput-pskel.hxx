// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef NEWINPUT_PSKEL_HXX
#define NEWINPUT_PSKEL_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

// Begin prologue.
//
//
// End prologue.

#include "xsd/cxx/config.hxx"

#include "xsd/cxx/pre.hxx"

// Forward declarations
//
class input_parameters_pskel;
class simulation_input_parameters_pskel;
class input_boundary_options_pskel;
class cuboid_input_parameters_pskel;
class sphere_input_parameters_pskel;
class dimension_pskel;
class avg_velocity_pskel;
class epsilon_pskel;
class delta_t_pskel;
class t_end_pskel;
class sigma_pskel;
class r_cutoff_pskel;
class domain_size_l_pskel;
class h_pskel;
class m_pskel;
class x1_pskel;
class x2_pskel;
class v1_pskel;
class v2_pskel;
class N1_pskel;
class N2_pskel;
class x_center_pskel;
class v_pskel;

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include "xsd/cxx/xml/error-handler.hxx"
#include "xsd/cxx/parser/exceptions.hxx"
#include "xsd/cxx/parser/elements.hxx"
#include "xsd/cxx/parser/xml-schema.hxx"
#include "xsd/cxx/parser/validating/parser.hxx"
#include "xsd/cxx/parser/validating/exceptions.hxx"
#include "xsd/cxx/parser/validating/xml-schema-pskel.hxx"
#include "xsd/cxx/parser/validating/xml-schema-pimpl.hxx"
#include "xsd/cxx/parser/expat/elements.hxx"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

class input_parameters_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  algorithm_option (const ::std::string&);

  virtual void
  write_frequency (float);

  virtual void
  output_file_param (const ::std::string&);

  virtual void
  log_level (float);

  virtual void
  simulation_input_parameters ();

  virtual void
  input_boundary_options ();

  virtual void
  cuboid_input_parameters ();

  virtual void
  sphere_input_parameters ();

  virtual void
  post_input_parameters ();

  // Parser construction API.
  //
  void
  algorithm_option_parser (::xml_schema::string_pskel&);

  void
  write_frequency_parser (::xml_schema::float_pskel&);

  void
  output_file_param_parser (::xml_schema::string_pskel&);

  void
  log_level_parser (::xml_schema::float_pskel&);

  void
  simulation_input_parameters_parser (::simulation_input_parameters_pskel&);

  void
  input_boundary_options_parser (::input_boundary_options_pskel&);

  void
  cuboid_input_parameters_parser (::cuboid_input_parameters_pskel&);

  void
  sphere_input_parameters_parser (::sphere_input_parameters_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* algorithm_option */,
           ::xml_schema::float_pskel& /* write_frequency */,
           ::xml_schema::string_pskel& /* output_file_param */,
           ::xml_schema::float_pskel& /* log_level */,
           ::simulation_input_parameters_pskel& /* simulation_input_parameters */,
           ::input_boundary_options_pskel& /* input_boundary_options */,
           ::cuboid_input_parameters_pskel& /* cuboid_input_parameters */,
           ::sphere_input_parameters_pskel& /* sphere_input_parameters */);

  // Constructor.
  //
  input_parameters_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* algorithm_option_parser_;
  ::xml_schema::float_pskel* write_frequency_parser_;
  ::xml_schema::string_pskel* output_file_param_parser_;
  ::xml_schema::float_pskel* log_level_parser_;
  ::simulation_input_parameters_pskel* simulation_input_parameters_parser_;
  ::input_boundary_options_pskel* input_boundary_options_parser_;
  ::cuboid_input_parameters_pskel* cuboid_input_parameters_parser_;
  ::sphere_input_parameters_pskel* sphere_input_parameters_parser_;

  protected:
  struct v_state_descr_
  {
    void (::input_parameters_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class simulation_input_parameters_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  dimension ();

  virtual void
  avg_velocity ();

  virtual void
  epsilon ();

  virtual void
  delta_t ();

  virtual void
  t_end ();

  virtual void
  sigma ();

  virtual void
  r_cutoff ();

  virtual void
  domain_size_l ();

  virtual void
  post_simulation_input_parameters ();

  // Parser construction API.
  //
  void
  dimension_parser (::dimension_pskel&);

  void
  avg_velocity_parser (::avg_velocity_pskel&);

  void
  epsilon_parser (::epsilon_pskel&);

  void
  delta_t_parser (::delta_t_pskel&);

  void
  t_end_parser (::t_end_pskel&);

  void
  sigma_parser (::sigma_pskel&);

  void
  r_cutoff_parser (::r_cutoff_pskel&);

  void
  domain_size_l_parser (::domain_size_l_pskel&);

  void
  parsers (::dimension_pskel& /* dimension */,
           ::avg_velocity_pskel& /* avg_velocity */,
           ::epsilon_pskel& /* epsilon */,
           ::delta_t_pskel& /* delta_t */,
           ::t_end_pskel& /* t_end */,
           ::sigma_pskel& /* sigma */,
           ::r_cutoff_pskel& /* r_cutoff */,
           ::domain_size_l_pskel& /* domain_size_l */);

  // Constructor.
  //
  simulation_input_parameters_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::dimension_pskel* dimension_parser_;
  ::avg_velocity_pskel* avg_velocity_parser_;
  ::epsilon_pskel* epsilon_parser_;
  ::delta_t_pskel* delta_t_parser_;
  ::t_end_pskel* t_end_parser_;
  ::sigma_pskel* sigma_parser_;
  ::r_cutoff_pskel* r_cutoff_parser_;
  ::domain_size_l_pskel* domain_size_l_parser_;

  protected:
  struct v_state_descr_
  {
    void (::simulation_input_parameters_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class input_boundary_options_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  b1 (const ::std::string&);

  virtual void
  b2 (const ::std::string&);

  virtual void
  b3 (const ::std::string&);

  virtual void
  b4 (const ::std::string&);

  virtual void
  b5 (const ::std::string&);

  virtual void
  b6 (const ::std::string&);

  virtual void
  post_input_boundary_options ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  b1_parser (::xml_schema::string_pskel&);

  void
  b2_parser (::xml_schema::string_pskel&);

  void
  b3_parser (::xml_schema::string_pskel&);

  void
  b4_parser (::xml_schema::string_pskel&);

  void
  b5_parser (::xml_schema::string_pskel&);

  void
  b6_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* b1 */,
           ::xml_schema::string_pskel& /* b2 */,
           ::xml_schema::string_pskel& /* b3 */,
           ::xml_schema::string_pskel& /* b4 */,
           ::xml_schema::string_pskel& /* b5 */,
           ::xml_schema::string_pskel& /* b6 */);

  // Constructor.
  //
  input_boundary_options_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* b1_parser_;
  ::xml_schema::string_pskel* b2_parser_;
  ::xml_schema::string_pskel* b3_parser_;
  ::xml_schema::string_pskel* b4_parser_;
  ::xml_schema::string_pskel* b5_parser_;
  ::xml_schema::string_pskel* b6_parser_;

  protected:
  struct v_state_descr_
  {
    void (::input_boundary_options_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class cuboid_input_parameters_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  h ();

  virtual void
  m ();

  virtual void
  x1 ();

  virtual void
  x2 ();

  virtual void
  v1 ();

  virtual void
  v2 ();

  virtual void
  N1 ();

  virtual void
  N2 ();

  virtual void
  post_cuboid_input_parameters ();

  // Parser construction API.
  //
  void
  h_parser (::h_pskel&);

  void
  m_parser (::m_pskel&);

  void
  x1_parser (::x1_pskel&);

  void
  x2_parser (::x2_pskel&);

  void
  v1_parser (::v1_pskel&);

  void
  v2_parser (::v2_pskel&);

  void
  N1_parser (::N1_pskel&);

  void
  N2_parser (::N2_pskel&);

  void
  parsers (::h_pskel& /* h */,
           ::m_pskel& /* m */,
           ::x1_pskel& /* x1 */,
           ::x2_pskel& /* x2 */,
           ::v1_pskel& /* v1 */,
           ::v2_pskel& /* v2 */,
           ::N1_pskel& /* N1 */,
           ::N2_pskel& /* N2 */);

  // Constructor.
  //
  cuboid_input_parameters_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::h_pskel* h_parser_;
  ::m_pskel* m_parser_;
  ::x1_pskel* x1_parser_;
  ::x2_pskel* x2_parser_;
  ::v1_pskel* v1_parser_;
  ::v2_pskel* v2_parser_;
  ::N1_pskel* N1_parser_;
  ::N2_pskel* N2_parser_;

  protected:
  struct v_state_descr_
  {
    void (::cuboid_input_parameters_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class sphere_input_parameters_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  h ();

  virtual void
  dimension ();

  virtual void
  m ();

  virtual void
  x_center ();

  virtual void
  v ();

  virtual void
  post_sphere_input_parameters ();

  // Parser construction API.
  //
  void
  h_parser (::h_pskel&);

  void
  dimension_parser (::dimension_pskel&);

  void
  m_parser (::m_pskel&);

  void
  x_center_parser (::x_center_pskel&);

  void
  v_parser (::v_pskel&);

  void
  parsers (::h_pskel& /* h */,
           ::dimension_pskel& /* dimension */,
           ::m_pskel& /* m */,
           ::x_center_pskel& /* x_center */,
           ::v_pskel& /* v */);

  // Constructor.
  //
  sphere_input_parameters_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::h_pskel* h_parser_;
  ::dimension_pskel* dimension_parser_;
  ::m_pskel* m_parser_;
  ::x_center_pskel* x_center_parser_;
  ::v_pskel* v_parser_;

  protected:
  struct v_state_descr_
  {
    void (::sphere_input_parameters_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class dimension_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  value (float);

  virtual void
  post_dimension ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  value_parser (::xml_schema::float_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::float_pskel& /* value */);

  // Constructor.
  //
  dimension_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::float_pskel* value_parser_;

  protected:
  struct v_state_descr_
  {
    void (::dimension_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class avg_velocity_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  value (float);

  virtual void
  post_avg_velocity ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  value_parser (::xml_schema::float_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::float_pskel& /* value */);

  // Constructor.
  //
  avg_velocity_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::float_pskel* value_parser_;

  protected:
  struct v_state_descr_
  {
    void (::avg_velocity_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class epsilon_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  value (float);

  virtual void
  post_epsilon ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  value_parser (::xml_schema::float_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::float_pskel& /* value */);

  // Constructor.
  //
  epsilon_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::float_pskel* value_parser_;

  protected:
  struct v_state_descr_
  {
    void (::epsilon_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class delta_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  value (float);

  virtual void
  post_delta_t ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  value_parser (::xml_schema::float_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::float_pskel& /* value */);

  // Constructor.
  //
  delta_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::float_pskel* value_parser_;

  protected:
  struct v_state_descr_
  {
    void (::delta_t_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class t_end_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  value (float);

  virtual void
  post_t_end ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  value_parser (::xml_schema::float_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::float_pskel& /* value */);

  // Constructor.
  //
  t_end_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::float_pskel* value_parser_;

  protected:
  struct v_state_descr_
  {
    void (::t_end_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class sigma_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  value (float);

  virtual void
  post_sigma ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  value_parser (::xml_schema::float_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::float_pskel& /* value */);

  // Constructor.
  //
  sigma_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::float_pskel* value_parser_;

  protected:
  struct v_state_descr_
  {
    void (::sigma_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class r_cutoff_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  value (float);

  virtual void
  post_r_cutoff ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  value_parser (::xml_schema::float_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::float_pskel& /* value */);

  // Constructor.
  //
  r_cutoff_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::float_pskel* value_parser_;

  protected:
  struct v_state_descr_
  {
    void (::r_cutoff_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class domain_size_l_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  x (signed char);

  virtual void
  y (signed char);

  virtual void
  z (signed char);

  virtual void
  post_domain_size_l ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  x_parser (::xml_schema::short_pskel&);

  void
  y_parser (::xml_schema::byte_pskel&);

  void
  z_parser (::xml_schema::byte_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::short_pskel& /* x */,
           ::xml_schema::byte_pskel& /* y */,
           ::xml_schema::byte_pskel& /* z */);

  // Constructor.
  //
  domain_size_l_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::short_pskel* x_parser_;
  ::xml_schema::byte_pskel* y_parser_;
  ::xml_schema::byte_pskel* z_parser_;

  protected:
  struct v_state_descr_
  {
    void (::domain_size_l_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class h_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  value (float);

  virtual void
  post_h ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  value_parser (::xml_schema::float_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::float_pskel& /* value */);

  // Constructor.
  //
  h_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::float_pskel* value_parser_;

  protected:
  struct v_state_descr_
  {
    void (::h_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class m_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  value (float);

  virtual void
  post_m ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  value_parser (::xml_schema::float_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::float_pskel& /* value */);

  // Constructor.
  //
  m_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::float_pskel* value_parser_;

  protected:
  struct v_state_descr_
  {
    void (::m_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class x1_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  x (signed char);

  virtual void
  y (signed char);

  virtual void
  z (signed char);

  virtual void
  post_x1 ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  x_parser (::xml_schema::byte_pskel&);

  void
  y_parser (::xml_schema::byte_pskel&);

  void
  z_parser (::xml_schema::byte_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* x */,
           ::xml_schema::byte_pskel& /* y */,
           ::xml_schema::byte_pskel& /* z */);

  // Constructor.
  //
  x1_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* x_parser_;
  ::xml_schema::byte_pskel* y_parser_;
  ::xml_schema::byte_pskel* z_parser_;

  protected:
  struct v_state_descr_
  {
    void (::x1_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class x2_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  x (signed char);

  virtual void
  y (signed char);

  virtual void
  z (signed char);

  virtual void
  post_x2 ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  x_parser (::xml_schema::byte_pskel&);

  void
  y_parser (::xml_schema::byte_pskel&);

  void
  z_parser (::xml_schema::byte_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* x */,
           ::xml_schema::byte_pskel& /* y */,
           ::xml_schema::byte_pskel& /* z */);

  // Constructor.
  //
  x2_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* x_parser_;
  ::xml_schema::byte_pskel* y_parser_;
  ::xml_schema::byte_pskel* z_parser_;

  protected:
  struct v_state_descr_
  {
    void (::x2_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class v1_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  x (signed char);

  virtual void
  y (signed char);

  virtual void
  z (signed char);

  virtual void
  post_v1 ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  x_parser (::xml_schema::byte_pskel&);

  void
  y_parser (::xml_schema::byte_pskel&);

  void
  z_parser (::xml_schema::byte_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* x */,
           ::xml_schema::byte_pskel& /* y */,
           ::xml_schema::byte_pskel& /* z */);

  // Constructor.
  //
  v1_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* x_parser_;
  ::xml_schema::byte_pskel* y_parser_;
  ::xml_schema::byte_pskel* z_parser_;

  protected:
  struct v_state_descr_
  {
    void (::v1_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class v2_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  x (signed char);

  virtual void
  y (signed char);

  virtual void
  z (signed char);

  virtual void
  post_v2 ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  x_parser (::xml_schema::byte_pskel&);

  void
  y_parser (::xml_schema::byte_pskel&);

  void
  z_parser (::xml_schema::byte_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* x */,
           ::xml_schema::byte_pskel& /* y */,
           ::xml_schema::byte_pskel& /* z */);

  // Constructor.
  //
  v2_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* x_parser_;
  ::xml_schema::byte_pskel* y_parser_;
  ::xml_schema::byte_pskel* z_parser_;

  protected:
  struct v_state_descr_
  {
    void (::v2_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class N1_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  x (signed char);

  virtual void
  y (signed char);

  virtual void
  z (signed char);

  virtual void
  post_N1 ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  x_parser (::xml_schema::byte_pskel&);

  void
  y_parser (::xml_schema::byte_pskel&);

  void
  z_parser (::xml_schema::byte_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* x */,
           ::xml_schema::byte_pskel& /* y */,
           ::xml_schema::byte_pskel& /* z */);

  // Constructor.
  //
  N1_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* x_parser_;
  ::xml_schema::byte_pskel* y_parser_;
  ::xml_schema::byte_pskel* z_parser_;

  protected:
  struct v_state_descr_
  {
    void (::N1_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class N2_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  x (signed char);

  virtual void
  y (signed char);

  virtual void
  z (signed char);

  virtual void
  post_N2 ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  x_parser (::xml_schema::byte_pskel&);

  void
  y_parser (::xml_schema::byte_pskel&);

  void
  z_parser (::xml_schema::byte_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* x */,
           ::xml_schema::byte_pskel& /* y */,
           ::xml_schema::byte_pskel& /* z */);

  // Constructor.
  //
  N2_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _characters_impl (const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* x_parser_;
  ::xml_schema::byte_pskel* y_parser_;
  ::xml_schema::byte_pskel* z_parser_;

  protected:
  struct v_state_descr_
  {
    void (::N2_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class x_center_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  x (signed char);

  virtual void
  y (signed char);

  virtual void
  z (signed char);

  virtual void
  post_x_center ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  x_parser (::xml_schema::byte_pskel&);

  void
  y_parser (::xml_schema::byte_pskel&);

  void
  z_parser (::xml_schema::byte_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* x */,
           ::xml_schema::byte_pskel& /* y */,
           ::xml_schema::byte_pskel& /* z */);

  // Constructor.
  //
  x_center_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* x_parser_;
  ::xml_schema::byte_pskel* y_parser_;
  ::xml_schema::byte_pskel* z_parser_;

  protected:
  struct v_state_descr_
  {
    void (::x_center_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class v_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  x (signed char);

  virtual void
  y (signed char);

  virtual void
  z (signed char);

  virtual void
  post_v ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  x_parser (::xml_schema::byte_pskel&);

  void
  y_parser (::xml_schema::byte_pskel&);

  void
  z_parser (::xml_schema::byte_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* x */,
           ::xml_schema::byte_pskel& /* y */,
           ::xml_schema::byte_pskel& /* z */);

  // Constructor.
  //
  v_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* x_parser_;
  ::xml_schema::byte_pskel* y_parser_;
  ::xml_schema::byte_pskel* z_parser_;

  protected:
  struct v_state_descr_
  {
    void (::v_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

#include "xsd/cxx/post.hxx"

// Begin epilogue.
//
//
// End epilogue.

#endif // NEWINPUT_PSKEL_HXX
