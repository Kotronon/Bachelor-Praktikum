// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "newinput-pimpl.hxx"

#include <iostream>

// input_parameters_pimpl
//

void input_parameters_pimpl::
pre ()
{
}

void input_parameters_pimpl::
algorithm_option (const ::std::string& algorithm_option)
{
  std::cout << "algorithm_option: " << algorithm_option << std::endl;
}

void input_parameters_pimpl::
write_frequency (float write_frequency)
{
  std::cout << "write_frequency: " << write_frequency << std::endl;
}

void input_parameters_pimpl::
output_file_param (const ::std::string& output_file_param)
{
  std::cout << "output_file_param: " << output_file_param << std::endl;
}

void input_parameters_pimpl::
log_level (float log_level)
{
  std::cout << "log_level: " << log_level << std::endl;
}

void input_parameters_pimpl::
simulation_input_parameters ()
{
}

void input_parameters_pimpl::
input_boundary_options ()
{
}

void input_parameters_pimpl::
cuboid_input_parameters ()
{
}

void input_parameters_pimpl::
sphere_input_parameters ()
{
}

void input_parameters_pimpl::
post_input_parameters ()
{
}

input_parameters_pimpl::~input_parameters_pimpl() {

}

// simulation_input_parameters_pimpl
//

void simulation_input_parameters_pimpl::
pre ()
{
}

void simulation_input_parameters_pimpl::
dimension ()
{
}

void simulation_input_parameters_pimpl::
avg_velocity ()
{
}

void simulation_input_parameters_pimpl::
epsilon ()
{
}

void simulation_input_parameters_pimpl::
delta_t ()
{
}

void simulation_input_parameters_pimpl::
t_end ()
{
}

void simulation_input_parameters_pimpl::
sigma ()
{
}

void simulation_input_parameters_pimpl::
r_cutoff ()
{
}

void simulation_input_parameters_pimpl::
domain_size_l ()
{
}

void simulation_input_parameters_pimpl::
post_simulation_input_parameters ()
{
}

simulation_input_parameters_pimpl::~simulation_input_parameters_pimpl() {

}

// input_boundary_options_pimpl
//

void input_boundary_options_pimpl::
pre ()
{
}

void input_boundary_options_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void input_boundary_options_pimpl::
b1 (const ::std::string& b1)
{
  std::cout << "b1: " << b1 << std::endl;
}

void input_boundary_options_pimpl::
b2 (const ::std::string& b2)
{
  std::cout << "b2: " << b2 << std::endl;
}

void input_boundary_options_pimpl::
b3 (const ::std::string& b3)
{
  std::cout << "b3: " << b3 << std::endl;
}

void input_boundary_options_pimpl::
b4 (const ::std::string& b4)
{
  std::cout << "b4: " << b4 << std::endl;
}

void input_boundary_options_pimpl::
b5 (const ::std::string& b5)
{
  std::cout << "b5: " << b5 << std::endl;
}

void input_boundary_options_pimpl::
b6 (const ::std::string& b6)
{
  std::cout << "b6: " << b6 << std::endl;
}

void input_boundary_options_pimpl::
post_input_boundary_options ()
{
}

input_boundary_options_pimpl::~input_boundary_options_pimpl() {

}

// cuboid_input_parameters_pimpl
//

void cuboid_input_parameters_pimpl::
pre ()
{
}

void cuboid_input_parameters_pimpl::
h ()
{
}

void cuboid_input_parameters_pimpl::
m ()
{
}

void cuboid_input_parameters_pimpl::
x1 ()
{
}

void cuboid_input_parameters_pimpl::
x2 ()
{
}

void cuboid_input_parameters_pimpl::
v1 ()
{
}

void cuboid_input_parameters_pimpl::
v2 ()
{
}

void cuboid_input_parameters_pimpl::
N1 ()
{
}

void cuboid_input_parameters_pimpl::
N2 ()
{
}

void cuboid_input_parameters_pimpl::
post_cuboid_input_parameters ()
{
}

cuboid_input_parameters_pimpl::~cuboid_input_parameters_pimpl() {

}

// sphere_input_parameters_pimpl
//

void sphere_input_parameters_pimpl::
pre ()
{
}

void sphere_input_parameters_pimpl::
h ()
{
}

void sphere_input_parameters_pimpl::
dimension ()
{
}

void sphere_input_parameters_pimpl::
m ()
{
}

void sphere_input_parameters_pimpl::
x_center ()
{
}

void sphere_input_parameters_pimpl::
v ()
{
}

void sphere_input_parameters_pimpl::
post_sphere_input_parameters ()
{
}

sphere_input_parameters_pimpl::~sphere_input_parameters_pimpl() {

}

// dimension_pimpl
//

void dimension_pimpl::
pre ()
{
}

void dimension_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void dimension_pimpl::
value (float value)
{
  std::cout << "value: " << value << std::endl;
}

void dimension_pimpl::
post_dimension ()
{
}

dimension_pimpl::~dimension_pimpl() {

}

// avg_velocity_pimpl
//

void avg_velocity_pimpl::
pre ()
{
}

void avg_velocity_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void avg_velocity_pimpl::
value (float value)
{
  std::cout << "value: " << value << std::endl;
}

void avg_velocity_pimpl::
post_avg_velocity ()
{
}

avg_velocity_pimpl::~avg_velocity_pimpl() {

}

// epsilon_pimpl
//

void epsilon_pimpl::
pre ()
{
}

void epsilon_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void epsilon_pimpl::
value (float value)
{
  std::cout << "value: " << value << std::endl;
}

void epsilon_pimpl::
post_epsilon ()
{
}

epsilon_pimpl::~epsilon_pimpl() {

}

// delta_t_pimpl
//

void delta_t_pimpl::
pre ()
{
}

void delta_t_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void delta_t_pimpl::
value (float value)
{
  std::cout << "value: " << value << std::endl;
}

void delta_t_pimpl::
post_delta_t ()
{
}

delta_t_pimpl::~delta_t_pimpl() {

}

// t_end_pimpl
//

void t_end_pimpl::
pre ()
{
}

void t_end_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void t_end_pimpl::
value (float value)
{
  std::cout << "value: " << value << std::endl;
}

void t_end_pimpl::
post_t_end ()
{
}

t_end_pimpl::~t_end_pimpl() {

}

// sigma_pimpl
//

void sigma_pimpl::
pre ()
{
}

void sigma_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void sigma_pimpl::
value (float value)
{
  std::cout << "value: " << value << std::endl;
}

void sigma_pimpl::
post_sigma ()
{
}

sigma_pimpl::~sigma_pimpl() {

}

// r_cutoff_pimpl
//

void r_cutoff_pimpl::
pre ()
{
}

void r_cutoff_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void r_cutoff_pimpl::
value (float value)
{
  std::cout << "value: " << value << std::endl;
}

void r_cutoff_pimpl::
post_r_cutoff ()
{
}

r_cutoff_pimpl::~r_cutoff_pimpl() {

}

// domain_size_l_pimpl
//

void domain_size_l_pimpl::
pre ()
{
}

void domain_size_l_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void domain_size_l_pimpl::
x (short x)
{
  std::cout << "x: " << static_cast<short> (x) << std::endl;
}

void domain_size_l_pimpl::
y (signed char y)
{
  std::cout << "y: " << static_cast<short> (y) << std::endl;
}

void domain_size_l_pimpl::
z (signed char z)
{
  std::cout << "z: " << static_cast<short> (z) << std::endl;
}

void domain_size_l_pimpl::
post_domain_size_l ()
{
}

domain_size_l_pimpl::~domain_size_l_pimpl() {

}

// h_pimpl
//

void h_pimpl::
pre ()
{
}

void h_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void h_pimpl::
value (float value)
{
  std::cout << "value: " << value << std::endl;
}

void h_pimpl::
post_h ()
{
}

h_pimpl::~h_pimpl() {

}

// m_pimpl
//

void m_pimpl::
pre ()
{
}

void m_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void m_pimpl::
value (float value)
{
  std::cout << "value: " << value << std::endl;
}

void m_pimpl::
post_m ()
{
}

m_pimpl::~m_pimpl() {

}

// x1_pimpl
//

void x1_pimpl::
pre ()
{
}

void x1_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void x1_pimpl::
x (signed char x)
{
  std::cout << "x: " << static_cast<short> (x) << std::endl;
}

void x1_pimpl::
y (signed char y)
{
  std::cout << "y: " << static_cast<short> (y) << std::endl;
}

void x1_pimpl::
z (signed char z)
{
  std::cout << "z: " << static_cast<short> (z) << std::endl;
}

void x1_pimpl::
post_x1 ()
{
}

x1_pimpl::~x1_pimpl() {

}

// x2_pimpl
//

void x2_pimpl::
pre ()
{
}

void x2_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void x2_pimpl::
x (signed char x)
{
  std::cout << "x: " << static_cast<short> (x) << std::endl;
}

void x2_pimpl::
y (signed char y)
{
  std::cout << "y: " << static_cast<short> (y) << std::endl;
}

void x2_pimpl::
z (signed char z)
{
  std::cout << "z: " << static_cast<short> (z) << std::endl;
}

void x2_pimpl::
post_x2 ()
{
}

// v1_pimpl
//

void v1_pimpl::
pre ()
{
}

void v1_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void v1_pimpl::
x (signed char x)
{
  std::cout << "x: " << static_cast<short> (x) << std::endl;
}

void v1_pimpl::
y (signed char y)
{
  std::cout << "y: " << static_cast<short> (y) << std::endl;
}

void v1_pimpl::
z (signed char z)
{
  std::cout << "z: " << static_cast<short> (z) << std::endl;
}

void v1_pimpl::
post_v1 ()
{
}

// v2_pimpl
//

void v2_pimpl::
pre ()
{
}

void v2_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void v2_pimpl::
x (signed char x)
{
  std::cout << "x: " << static_cast<short> (x) << std::endl;
}

void v2_pimpl::
y (signed char y)
{
  std::cout << "y: " << static_cast<short> (y) << std::endl;
}

void v2_pimpl::
z (signed char z)
{
  std::cout << "z: " << static_cast<short> (z) << std::endl;
}

void v2_pimpl::
post_v2 ()
{
}

// N1_pimpl
//

void N1_pimpl::
pre ()
{
}

void N1_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void N1_pimpl::
x (signed char x)
{
  std::cout << "x: " << static_cast<short> (x) << std::endl;
}

void N1_pimpl::
y (signed char y)
{
  std::cout << "y: " << static_cast<short> (y) << std::endl;
}

void N1_pimpl::
z (signed char z)
{
  std::cout << "z: " << static_cast<short> (z) << std::endl;
}

void N1_pimpl::
post_N1 ()
{
}

// N2_pimpl
//

void N2_pimpl::
pre ()
{
}

void N2_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void N2_pimpl::
x (signed char x)
{
  std::cout << "x: " << static_cast<short> (x) << std::endl;
}

void N2_pimpl::
y (signed char y)
{
  std::cout << "y: " << static_cast<short> (y) << std::endl;
}

void N2_pimpl::
z (signed char z)
{
  std::cout << "z: " << static_cast<short> (z) << std::endl;
}

void N2_pimpl::
post_N2 ()
{
}

// x_center_pimpl
//

void x_center_pimpl::
pre ()
{
}

void x_center_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void x_center_pimpl::
x (signed char x)
{
  std::cout << "x: " << static_cast<short> (x) << std::endl;
}

void x_center_pimpl::
y (signed char y)
{
  std::cout << "y: " << static_cast<short> (y) << std::endl;
}

void x_center_pimpl::
z (signed char z)
{
  std::cout << "z: " << static_cast<short> (z) << std::endl;
}

void x_center_pimpl::
post_x_center ()
{
}

// v_pimpl
//

void v_pimpl::
pre ()
{
}

void v_pimpl::
name (const ::std::string& name)
{
  std::cout << "name: " << name << std::endl;
}

void v_pimpl::
x (signed char x)
{
  std::cout << "x: " << static_cast<short> (x) << std::endl;
}

void v_pimpl::
y (signed char y)
{
  std::cout << "y: " << static_cast<short> (y) << std::endl;
}

void v_pimpl::
z (signed char z)
{
  std::cout << "z: " << static_cast<short> (z) << std::endl;
}

void v_pimpl::
post_v ()
{
}

