// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "xsd/cxx/pre.hxx"

#include "newinput-pskel.hxx"

// input_parameters_pskel
//

void input_parameters_pskel::
algorithm_option_parser (::xml_schema::string_pskel& p)
{
  this->algorithm_option_parser_ = &p;
}

void input_parameters_pskel::
write_frequency_parser (::xml_schema::float_pskel& p)
{
  this->write_frequency_parser_ = &p;
}

void input_parameters_pskel::
output_file_param_parser (::xml_schema::string_pskel& p)
{
  this->output_file_param_parser_ = &p;
}

void input_parameters_pskel::
log_level_parser (::xml_schema::float_pskel& p)
{
  this->log_level_parser_ = &p;
}

void input_parameters_pskel::
simulation_input_parameters_parser (::simulation_input_parameters_pskel& p)
{
  this->simulation_input_parameters_parser_ = &p;
}

void input_parameters_pskel::
input_boundary_options_parser (::input_boundary_options_pskel& p)
{
  this->input_boundary_options_parser_ = &p;
}

void input_parameters_pskel::
cuboid_input_parameters_parser (::cuboid_input_parameters_pskel& p)
{
  this->cuboid_input_parameters_parser_ = &p;
}

void input_parameters_pskel::
sphere_input_parameters_parser (::sphere_input_parameters_pskel& p)
{
  this->sphere_input_parameters_parser_ = &p;
}

void input_parameters_pskel::
parsers (::xml_schema::string_pskel& algorithm_option,
         ::xml_schema::float_pskel& write_frequency,
         ::xml_schema::string_pskel& output_file_param,
         ::xml_schema::float_pskel& log_level,
         ::simulation_input_parameters_pskel& simulation_input_parameters,
         ::input_boundary_options_pskel& input_boundary_options,
         ::cuboid_input_parameters_pskel& cuboid_input_parameters,
         ::sphere_input_parameters_pskel& sphere_input_parameters)
{
  this->algorithm_option_parser_ = &algorithm_option;
  this->write_frequency_parser_ = &write_frequency;
  this->output_file_param_parser_ = &output_file_param;
  this->log_level_parser_ = &log_level;
  this->simulation_input_parameters_parser_ = &simulation_input_parameters;
  this->input_boundary_options_parser_ = &input_boundary_options;
  this->cuboid_input_parameters_parser_ = &cuboid_input_parameters;
  this->sphere_input_parameters_parser_ = &sphere_input_parameters;
}

input_parameters_pskel::
input_parameters_pskel ()
: algorithm_option_parser_ (0),
  write_frequency_parser_ (0),
  output_file_param_parser_ (0),
  log_level_parser_ (0),
  simulation_input_parameters_parser_ (0),
  input_boundary_options_parser_ (0),
  cuboid_input_parameters_parser_ (0),
  sphere_input_parameters_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// simulation_input_parameters_pskel
//

void simulation_input_parameters_pskel::
dimension_parser (::dimension_pskel& p)
{
  this->dimension_parser_ = &p;
}

void simulation_input_parameters_pskel::
avg_velocity_parser (::avg_velocity_pskel& p)
{
  this->avg_velocity_parser_ = &p;
}

void simulation_input_parameters_pskel::
epsilon_parser (::epsilon_pskel& p)
{
  this->epsilon_parser_ = &p;
}

void simulation_input_parameters_pskel::
delta_t_parser (::delta_t_pskel& p)
{
  this->delta_t_parser_ = &p;
}

void simulation_input_parameters_pskel::
t_end_parser (::t_end_pskel& p)
{
  this->t_end_parser_ = &p;
}

void simulation_input_parameters_pskel::
sigma_parser (::sigma_pskel& p)
{
  this->sigma_parser_ = &p;
}

void simulation_input_parameters_pskel::
r_cutoff_parser (::r_cutoff_pskel& p)
{
  this->r_cutoff_parser_ = &p;
}

void simulation_input_parameters_pskel::
domain_size_l_parser (::domain_size_l_pskel& p)
{
  this->domain_size_l_parser_ = &p;
}

void simulation_input_parameters_pskel::
parsers (::dimension_pskel& dimension,
         ::avg_velocity_pskel& avg_velocity,
         ::epsilon_pskel& epsilon,
         ::delta_t_pskel& delta_t,
         ::t_end_pskel& t_end,
         ::sigma_pskel& sigma,
         ::r_cutoff_pskel& r_cutoff,
         ::domain_size_l_pskel& domain_size_l)
{
  this->dimension_parser_ = &dimension;
  this->avg_velocity_parser_ = &avg_velocity;
  this->epsilon_parser_ = &epsilon;
  this->delta_t_parser_ = &delta_t;
  this->t_end_parser_ = &t_end;
  this->sigma_parser_ = &sigma;
  this->r_cutoff_parser_ = &r_cutoff;
  this->domain_size_l_parser_ = &domain_size_l;
}

simulation_input_parameters_pskel::
simulation_input_parameters_pskel ()
: dimension_parser_ (0),
  avg_velocity_parser_ (0),
  epsilon_parser_ (0),
  delta_t_parser_ (0),
  t_end_parser_ (0),
  sigma_parser_ (0),
  r_cutoff_parser_ (0),
  domain_size_l_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// input_boundary_options_pskel
//

void input_boundary_options_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void input_boundary_options_pskel::
b1_parser (::xml_schema::string_pskel& p)
{
  this->b1_parser_ = &p;
}

void input_boundary_options_pskel::
b2_parser (::xml_schema::string_pskel& p)
{
  this->b2_parser_ = &p;
}

void input_boundary_options_pskel::
b3_parser (::xml_schema::string_pskel& p)
{
  this->b3_parser_ = &p;
}

void input_boundary_options_pskel::
b4_parser (::xml_schema::string_pskel& p)
{
  this->b4_parser_ = &p;
}

void input_boundary_options_pskel::
b5_parser (::xml_schema::string_pskel& p)
{
  this->b5_parser_ = &p;
}

void input_boundary_options_pskel::
b6_parser (::xml_schema::string_pskel& p)
{
  this->b6_parser_ = &p;
}

void input_boundary_options_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::string_pskel& b1,
         ::xml_schema::string_pskel& b2,
         ::xml_schema::string_pskel& b3,
         ::xml_schema::string_pskel& b4,
         ::xml_schema::string_pskel& b5,
         ::xml_schema::string_pskel& b6)
{
  this->name_parser_ = &name;
  this->b1_parser_ = &b1;
  this->b2_parser_ = &b2;
  this->b3_parser_ = &b3;
  this->b4_parser_ = &b4;
  this->b5_parser_ = &b5;
  this->b6_parser_ = &b6;
}

input_boundary_options_pskel::
input_boundary_options_pskel ()
: name_parser_ (0),
  b1_parser_ (0),
  b2_parser_ (0),
  b3_parser_ (0),
  b4_parser_ (0),
  b5_parser_ (0),
  b6_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// cuboid_input_parameters_pskel
//

void cuboid_input_parameters_pskel::
h_parser (::h_pskel& p)
{
  this->h_parser_ = &p;
}

void cuboid_input_parameters_pskel::
m_parser (::m_pskel& p)
{
  this->m_parser_ = &p;
}

void cuboid_input_parameters_pskel::
x1_parser (::x1_pskel& p)
{
  this->x1_parser_ = &p;
}

void cuboid_input_parameters_pskel::
x2_parser (::x2_pskel& p)
{
  this->x2_parser_ = &p;
}

void cuboid_input_parameters_pskel::
v1_parser (::v1_pskel& p)
{
  this->v1_parser_ = &p;
}

void cuboid_input_parameters_pskel::
v2_parser (::v2_pskel& p)
{
  this->v2_parser_ = &p;
}

void cuboid_input_parameters_pskel::
N1_parser (::N1_pskel& p)
{
  this->N1_parser_ = &p;
}

void cuboid_input_parameters_pskel::
N2_parser (::N2_pskel& p)
{
  this->N2_parser_ = &p;
}

void cuboid_input_parameters_pskel::
parsers (::h_pskel& h,
         ::m_pskel& m,
         ::x1_pskel& x1,
         ::x2_pskel& x2,
         ::v1_pskel& v1,
         ::v2_pskel& v2,
         ::N1_pskel& N1,
         ::N2_pskel& N2)
{
  this->h_parser_ = &h;
  this->m_parser_ = &m;
  this->x1_parser_ = &x1;
  this->x2_parser_ = &x2;
  this->v1_parser_ = &v1;
  this->v2_parser_ = &v2;
  this->N1_parser_ = &N1;
  this->N2_parser_ = &N2;
}

cuboid_input_parameters_pskel::
cuboid_input_parameters_pskel ()
: h_parser_ (0),
  m_parser_ (0),
  x1_parser_ (0),
  x2_parser_ (0),
  v1_parser_ (0),
  v2_parser_ (0),
  N1_parser_ (0),
  N2_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// sphere_input_parameters_pskel
//

void sphere_input_parameters_pskel::
h_parser (::h_pskel& p)
{
  this->h_parser_ = &p;
}

void sphere_input_parameters_pskel::
dimension_parser (::dimension_pskel& p)
{
  this->dimension_parser_ = &p;
}

void sphere_input_parameters_pskel::
m_parser (::m_pskel& p)
{
  this->m_parser_ = &p;
}

void sphere_input_parameters_pskel::
x_center_parser (::x_center_pskel& p)
{
  this->x_center_parser_ = &p;
}

void sphere_input_parameters_pskel::
v_parser (::v_pskel& p)
{
  this->v_parser_ = &p;
}

void sphere_input_parameters_pskel::
parsers (::h_pskel& h,
         ::dimension_pskel& dimension,
         ::m_pskel& m,
         ::x_center_pskel& x_center,
         ::v_pskel& v)
{
  this->h_parser_ = &h;
  this->dimension_parser_ = &dimension;
  this->m_parser_ = &m;
  this->x_center_parser_ = &x_center;
  this->v_parser_ = &v;
}

sphere_input_parameters_pskel::
sphere_input_parameters_pskel ()
: h_parser_ (0),
  dimension_parser_ (0),
  m_parser_ (0),
  x_center_parser_ (0),
  v_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// dimension_pskel
//

void dimension_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void dimension_pskel::
value_parser (::xml_schema::float_pskel& p)
{
  this->value_parser_ = &p;
}

void dimension_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::float_pskel& value)
{
  this->name_parser_ = &name;
  this->value_parser_ = &value;
}

dimension_pskel::
dimension_pskel ()
: name_parser_ (0),
  value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// avg_velocity_pskel
//

void avg_velocity_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void avg_velocity_pskel::
value_parser (::xml_schema::float_pskel& p)
{
  this->value_parser_ = &p;
}

void avg_velocity_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::float_pskel& value)
{
  this->name_parser_ = &name;
  this->value_parser_ = &value;
}

avg_velocity_pskel::
avg_velocity_pskel ()
: name_parser_ (0),
  value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// epsilon_pskel
//

void epsilon_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void epsilon_pskel::
value_parser (::xml_schema::float_pskel& p)
{
  this->value_parser_ = &p;
}

void epsilon_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::float_pskel& value)
{
  this->name_parser_ = &name;
  this->value_parser_ = &value;
}

epsilon_pskel::
epsilon_pskel ()
: name_parser_ (0),
  value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// delta_t_pskel
//

void delta_t_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void delta_t_pskel::
value_parser (::xml_schema::float_pskel& p)
{
  this->value_parser_ = &p;
}

void delta_t_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::float_pskel& value)
{
  this->name_parser_ = &name;
  this->value_parser_ = &value;
}

delta_t_pskel::
delta_t_pskel ()
: name_parser_ (0),
  value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// t_end_pskel
//

void t_end_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void t_end_pskel::
value_parser (::xml_schema::float_pskel& p)
{
  this->value_parser_ = &p;
}

void t_end_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::float_pskel& value)
{
  this->name_parser_ = &name;
  this->value_parser_ = &value;
}

t_end_pskel::
t_end_pskel ()
: name_parser_ (0),
  value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// sigma_pskel
//

void sigma_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void sigma_pskel::
value_parser (::xml_schema::float_pskel& p)
{
  this->value_parser_ = &p;
}

void sigma_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::float_pskel& value)
{
  this->name_parser_ = &name;
  this->value_parser_ = &value;
}

sigma_pskel::
sigma_pskel ()
: name_parser_ (0),
  value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// r_cutoff_pskel
//

void r_cutoff_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void r_cutoff_pskel::
value_parser (::xml_schema::float_pskel& p)
{
  this->value_parser_ = &p;
}

void r_cutoff_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::float_pskel& value)
{
  this->name_parser_ = &name;
  this->value_parser_ = &value;
}

r_cutoff_pskel::
r_cutoff_pskel ()
: name_parser_ (0),
  value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// domain_size_l_pskel
//

void domain_size_l_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void domain_size_l_pskel::
x_parser (::xml_schema::short_pskel& p)
{
  this->x_parser_ = &p;
}

void domain_size_l_pskel::
y_parser (::xml_schema::byte_pskel& p)
{
  this->y_parser_ = &p;
}

void domain_size_l_pskel::
z_parser (::xml_schema::byte_pskel& p)
{
  this->z_parser_ = &p;
}

void domain_size_l_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::short_pskel& x,
         ::xml_schema::byte_pskel& y,
         ::xml_schema::byte_pskel& z)
{
  this->name_parser_ = &name;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

domain_size_l_pskel::
domain_size_l_pskel ()
: name_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// h_pskel
//

void h_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void h_pskel::
value_parser (::xml_schema::float_pskel& p)
{
  this->value_parser_ = &p;
}

void h_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::float_pskel& value)
{
  this->name_parser_ = &name;
  this->value_parser_ = &value;
}

h_pskel::
h_pskel ()
: name_parser_ (0),
  value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// m_pskel
//

void m_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void m_pskel::
value_parser (::xml_schema::float_pskel& p)
{
  this->value_parser_ = &p;
}

void m_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::float_pskel& value)
{
  this->name_parser_ = &name;
  this->value_parser_ = &value;
}

m_pskel::
m_pskel ()
: name_parser_ (0),
  value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// x1_pskel
//

void x1_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void x1_pskel::
x_parser (::xml_schema::byte_pskel& p)
{
  this->x_parser_ = &p;
}

void x1_pskel::
y_parser (::xml_schema::byte_pskel& p)
{
  this->y_parser_ = &p;
}

void x1_pskel::
z_parser (::xml_schema::byte_pskel& p)
{
  this->z_parser_ = &p;
}

void x1_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::byte_pskel& x,
         ::xml_schema::byte_pskel& y,
         ::xml_schema::byte_pskel& z)
{
  this->name_parser_ = &name;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

x1_pskel::
x1_pskel ()
: name_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// x2_pskel
//

void x2_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void x2_pskel::
x_parser (::xml_schema::byte_pskel& p)
{
  this->x_parser_ = &p;
}

void x2_pskel::
y_parser (::xml_schema::byte_pskel& p)
{
  this->y_parser_ = &p;
}

void x2_pskel::
z_parser (::xml_schema::byte_pskel& p)
{
  this->z_parser_ = &p;
}

void x2_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::byte_pskel& x,
         ::xml_schema::byte_pskel& y,
         ::xml_schema::byte_pskel& z)
{
  this->name_parser_ = &name;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

x2_pskel::
x2_pskel ()
: name_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// v1_pskel
//

void v1_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void v1_pskel::
x_parser (::xml_schema::byte_pskel& p)
{
  this->x_parser_ = &p;
}

void v1_pskel::
y_parser (::xml_schema::byte_pskel& p)
{
  this->y_parser_ = &p;
}

void v1_pskel::
z_parser (::xml_schema::byte_pskel& p)
{
  this->z_parser_ = &p;
}

void v1_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::byte_pskel& x,
         ::xml_schema::byte_pskel& y,
         ::xml_schema::byte_pskel& z)
{
  this->name_parser_ = &name;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

v1_pskel::
v1_pskel ()
: name_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// v2_pskel
//

void v2_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void v2_pskel::
x_parser (::xml_schema::byte_pskel& p)
{
  this->x_parser_ = &p;
}

void v2_pskel::
y_parser (::xml_schema::byte_pskel& p)
{
  this->y_parser_ = &p;
}

void v2_pskel::
z_parser (::xml_schema::byte_pskel& p)
{
  this->z_parser_ = &p;
}

void v2_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::byte_pskel& x,
         ::xml_schema::byte_pskel& y,
         ::xml_schema::byte_pskel& z)
{
  this->name_parser_ = &name;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

v2_pskel::
v2_pskel ()
: name_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// N1_pskel
//

void N1_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void N1_pskel::
x_parser (::xml_schema::byte_pskel& p)
{
  this->x_parser_ = &p;
}

void N1_pskel::
y_parser (::xml_schema::byte_pskel& p)
{
  this->y_parser_ = &p;
}

void N1_pskel::
z_parser (::xml_schema::byte_pskel& p)
{
  this->z_parser_ = &p;
}

void N1_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::byte_pskel& x,
         ::xml_schema::byte_pskel& y,
         ::xml_schema::byte_pskel& z)
{
  this->name_parser_ = &name;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

N1_pskel::
N1_pskel ()
: name_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// N2_pskel
//

void N2_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void N2_pskel::
x_parser (::xml_schema::byte_pskel& p)
{
  this->x_parser_ = &p;
}

void N2_pskel::
y_parser (::xml_schema::byte_pskel& p)
{
  this->y_parser_ = &p;
}

void N2_pskel::
z_parser (::xml_schema::byte_pskel& p)
{
  this->z_parser_ = &p;
}

void N2_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::byte_pskel& x,
         ::xml_schema::byte_pskel& y,
         ::xml_schema::byte_pskel& z)
{
  this->name_parser_ = &name;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

N2_pskel::
N2_pskel ()
: name_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// x_center_pskel
//

void x_center_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void x_center_pskel::
x_parser (::xml_schema::byte_pskel& p)
{
  this->x_parser_ = &p;
}

void x_center_pskel::
y_parser (::xml_schema::byte_pskel& p)
{
  this->y_parser_ = &p;
}

void x_center_pskel::
z_parser (::xml_schema::byte_pskel& p)
{
  this->z_parser_ = &p;
}

void x_center_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::byte_pskel& x,
         ::xml_schema::byte_pskel& y,
         ::xml_schema::byte_pskel& z)
{
  this->name_parser_ = &name;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

x_center_pskel::
x_center_pskel ()
: name_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// v_pskel
//

void v_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void v_pskel::
x_parser (::xml_schema::byte_pskel& p)
{
  this->x_parser_ = &p;
}

void v_pskel::
y_parser (::xml_schema::byte_pskel& p)
{
  this->y_parser_ = &p;
}

void v_pskel::
z_parser (::xml_schema::byte_pskel& p)
{
  this->z_parser_ = &p;
}

void v_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::byte_pskel& x,
         ::xml_schema::byte_pskel& y,
         ::xml_schema::byte_pskel& z)
{
  this->name_parser_ = &name;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

v_pskel::
v_pskel ()
: name_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// input_parameters_pskel
//

void input_parameters_pskel::
algorithm_option (const ::std::string&)
{
}

void input_parameters_pskel::
write_frequency (float)
{
}

void input_parameters_pskel::
output_file_param (const ::std::string&)
{
}

void input_parameters_pskel::
log_level (float)
{
}

void input_parameters_pskel::
simulation_input_parameters ()
{
}

void input_parameters_pskel::
input_boundary_options ()
{
}

void input_parameters_pskel::
cuboid_input_parameters ()
{
}

void input_parameters_pskel::
sphere_input_parameters ()
{
}

void input_parameters_pskel::
post_input_parameters ()
{
}

// simulation_input_parameters_pskel
//

void simulation_input_parameters_pskel::
dimension ()
{
}

void simulation_input_parameters_pskel::
avg_velocity ()
{
}

void simulation_input_parameters_pskel::
epsilon ()
{
}

void simulation_input_parameters_pskel::
delta_t ()
{
}

void simulation_input_parameters_pskel::
t_end ()
{
}

void simulation_input_parameters_pskel::
sigma ()
{
}

void simulation_input_parameters_pskel::
r_cutoff ()
{
}

void simulation_input_parameters_pskel::
domain_size_l ()
{
}

void simulation_input_parameters_pskel::
post_simulation_input_parameters ()
{
}

// input_boundary_options_pskel
//

void input_boundary_options_pskel::
name (const ::std::string&)
{
}

void input_boundary_options_pskel::
b1 (const ::std::string&)
{
}

void input_boundary_options_pskel::
b2 (const ::std::string&)
{
}

void input_boundary_options_pskel::
b3 (const ::std::string&)
{
}

void input_boundary_options_pskel::
b4 (const ::std::string&)
{
}

void input_boundary_options_pskel::
b5 (const ::std::string&)
{
}

void input_boundary_options_pskel::
b6 (const ::std::string&)
{
}

void input_boundary_options_pskel::
post_input_boundary_options ()
{
}

// cuboid_input_parameters_pskel
//

void cuboid_input_parameters_pskel::
h ()
{
}

void cuboid_input_parameters_pskel::
m ()
{
}

void cuboid_input_parameters_pskel::
x1 ()
{
}

void cuboid_input_parameters_pskel::
x2 ()
{
}

void cuboid_input_parameters_pskel::
v1 ()
{
}

void cuboid_input_parameters_pskel::
v2 ()
{
}

void cuboid_input_parameters_pskel::
N1 ()
{
}

void cuboid_input_parameters_pskel::
N2 ()
{
}

void cuboid_input_parameters_pskel::
post_cuboid_input_parameters ()
{
}

// sphere_input_parameters_pskel
//

void sphere_input_parameters_pskel::
h ()
{
}

void sphere_input_parameters_pskel::
dimension ()
{
}

void sphere_input_parameters_pskel::
m ()
{
}

void sphere_input_parameters_pskel::
x_center ()
{
}

void sphere_input_parameters_pskel::
v ()
{
}

void sphere_input_parameters_pskel::
post_sphere_input_parameters ()
{
}

// dimension_pskel
//

void dimension_pskel::
name (const ::std::string&)
{
}

void dimension_pskel::
value (float)
{
}

void dimension_pskel::
post_dimension ()
{
}

// avg_velocity_pskel
//

void avg_velocity_pskel::
name (const ::std::string&)
{
}

void avg_velocity_pskel::
value (float)
{
}

void avg_velocity_pskel::
post_avg_velocity ()
{
}

// epsilon_pskel
//

void epsilon_pskel::
name (const ::std::string&)
{
}

void epsilon_pskel::
value (float)
{
}

void epsilon_pskel::
post_epsilon ()
{
}

// delta_t_pskel
//

void delta_t_pskel::
name (const ::std::string&)
{
}

void delta_t_pskel::
value (float)
{
}

void delta_t_pskel::
post_delta_t ()
{
}

// t_end_pskel
//

void t_end_pskel::
name (const ::std::string&)
{
}

void t_end_pskel::
value (float)
{
}

void t_end_pskel::
post_t_end ()
{
}

// sigma_pskel
//

void sigma_pskel::
name (const ::std::string&)
{
}

void sigma_pskel::
value (float)
{
}

void sigma_pskel::
post_sigma ()
{
}

// r_cutoff_pskel
//

void r_cutoff_pskel::
name (const ::std::string&)
{
}

void r_cutoff_pskel::
value (float)
{
}

void r_cutoff_pskel::
post_r_cutoff ()
{
}

// domain_size_l_pskel
//

void domain_size_l_pskel::
name (const ::std::string&)
{
}

void domain_size_l_pskel::
x (signed char)
{
}

void domain_size_l_pskel::
y (signed char)
{
}

void domain_size_l_pskel::
z (signed char)
{
}

void domain_size_l_pskel::
post_domain_size_l ()
{
}

// h_pskel
//

void h_pskel::
name (const ::std::string&)
{
}

void h_pskel::
value (float)
{
}

void h_pskel::
post_h ()
{
}

// m_pskel
//

void m_pskel::
name (const ::std::string&)
{
}

void m_pskel::
value (float)
{
}

void m_pskel::
post_m ()
{
}

// x1_pskel
//

void x1_pskel::
name (const ::std::string&)
{
}

void x1_pskel::
x (signed char)
{
}

void x1_pskel::
y (signed char)
{
}

void x1_pskel::
z (signed char)
{
}

void x1_pskel::
post_x1 ()
{
}

// x2_pskel
//

void x2_pskel::
name (const ::std::string&)
{
}

void x2_pskel::
x (signed char)
{
}

void x2_pskel::
y (signed char)
{
}

void x2_pskel::
z (signed char)
{
}

void x2_pskel::
post_x2 ()
{
}

// v1_pskel
//

void v1_pskel::
name (const ::std::string&)
{
}

void v1_pskel::
x (signed char)
{
}

void v1_pskel::
y (signed char)
{
}

void v1_pskel::
z (signed char)
{
}

void v1_pskel::
post_v1 ()
{
}

// v2_pskel
//

void v2_pskel::
name (const ::std::string&)
{
}

void v2_pskel::
x (signed char)
{
}

void v2_pskel::
y (signed char)
{
}

void v2_pskel::
z (signed char)
{
}

void v2_pskel::
post_v2 ()
{
}

// N1_pskel
//

void N1_pskel::
name (const ::std::string&)
{
}

void N1_pskel::
x (signed char)
{
}

void N1_pskel::
y (signed char)
{
}

void N1_pskel::
z (signed char)
{
}

void N1_pskel::
post_N1 ()
{
}

// N2_pskel
//

void N2_pskel::
name (const ::std::string&)
{
}

void N2_pskel::
x (signed char)
{
}

void N2_pskel::
y (signed char)
{
}

void N2_pskel::
z (signed char)
{
}

void N2_pskel::
post_N2 ()
{
}

// x_center_pskel
//

void x_center_pskel::
name (const ::std::string&)
{
}

void x_center_pskel::
x (signed char)
{
}

void x_center_pskel::
y (signed char)
{
}

void x_center_pskel::
z (signed char)
{
}

void x_center_pskel::
post_x_center ()
{
}

// v_pskel
//

void v_pskel::
name (const ::std::string&)
{
}

void v_pskel::
x (signed char)
{
}

void v_pskel::
y (signed char)
{
}

void v_pskel::
z (signed char)
{
}

void v_pskel::
post_v ()
{
}

#include <cassert>

// Element validation and dispatch functions for input_parameters_pskel.
//
bool input_parameters_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "algorithm_option" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &input_parameters_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "algorithm_option",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool input_parameters_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void input_parameters_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void input_parameters_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "algorithm_option");

  this->v_state_stack_.pop ();
}

void input_parameters_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "algorithm_option" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->algorithm_option_parser_;

          if (this->algorithm_option_parser_)
            this->algorithm_option_parser_->pre ();
        }
        else
        {
          if (this->algorithm_option_parser_)
          {
            this->algorithm_option (this->algorithm_option_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "algorithm_option",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "write_frequency" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->write_frequency_parser_;

          if (this->write_frequency_parser_)
            this->write_frequency_parser_->pre ();
        }
        else
        {
          if (this->write_frequency_parser_)
          {
            this->write_frequency (this->write_frequency_parser_->post_float ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "write_frequency",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "output_file_param" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->output_file_param_parser_;

          if (this->output_file_param_parser_)
            this->output_file_param_parser_->pre ();
        }
        else
        {
          if (this->output_file_param_parser_)
          {
            this->output_file_param (this->output_file_param_parser_->post_string ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "output_file_param",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "log_level" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->log_level_parser_;

          if (this->log_level_parser_)
            this->log_level_parser_->pre ();
        }
        else
        {
          if (this->log_level_parser_)
          {
            this->log_level (this->log_level_parser_->post_float ());
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "log_level",
            ns, n);
        count = 0;
        state = 4UL;
      }
    }
    // Fall through.
    case 4UL:
    {
      if (n == "simulation_input_parameters" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->simulation_input_parameters_parser_;

          if (this->simulation_input_parameters_parser_)
            this->simulation_input_parameters_parser_->pre ();
        }
        else
        {
          if (this->simulation_input_parameters_parser_)
          {
            this->simulation_input_parameters_parser_->post_simulation_input_parameters ();
            this->simulation_input_parameters ();
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "simulation_input_parameters",
            ns, n);
        count = 0;
        state = 5UL;
      }
    }
    // Fall through.
    case 5UL:
    {
      if (n == "input_boundary_options" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->input_boundary_options_parser_;

          if (this->input_boundary_options_parser_)
            this->input_boundary_options_parser_->pre ();
        }
        else
        {
          if (this->input_boundary_options_parser_)
          {
            this->input_boundary_options_parser_->post_input_boundary_options ();
            this->input_boundary_options ();
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "input_boundary_options",
            ns, n);
        count = 0;
        state = 6UL;
      }
    }
    // Fall through.
    case 6UL:
    {
      if (n == "cuboid_input_parameters" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->cuboid_input_parameters_parser_;

          if (this->cuboid_input_parameters_parser_)
            this->cuboid_input_parameters_parser_->pre ();
        }
        else
        {
          if (this->cuboid_input_parameters_parser_)
          {
            this->cuboid_input_parameters_parser_->post_cuboid_input_parameters ();
            this->cuboid_input_parameters ();
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "cuboid_input_parameters",
            ns, n);
        count = 0;
        state = 7UL;
      }
    }
    // Fall through.
    case 7UL:
    {
      if (n == "sphere_input_parameters" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->sphere_input_parameters_parser_;

          if (this->sphere_input_parameters_parser_)
            this->sphere_input_parameters_parser_->pre ();
        }
        else
        {
          if (this->sphere_input_parameters_parser_)
          {
            this->sphere_input_parameters_parser_->post_sphere_input_parameters ();
            this->sphere_input_parameters ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "sphere_input_parameters",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for simulation_input_parameters_pskel.
//
bool simulation_input_parameters_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "dimension" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &simulation_input_parameters_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "dimension",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool simulation_input_parameters_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void simulation_input_parameters_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void simulation_input_parameters_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "dimension");

  this->v_state_stack_.pop ();
}

void simulation_input_parameters_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "dimension" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->dimension_parser_;

          if (this->dimension_parser_)
            this->dimension_parser_->pre ();
        }
        else
        {
          if (this->dimension_parser_)
          {
            this->dimension_parser_->post_dimension ();
            this->dimension ();
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "dimension",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "avg_velocity" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->avg_velocity_parser_;

          if (this->avg_velocity_parser_)
            this->avg_velocity_parser_->pre ();
        }
        else
        {
          if (this->avg_velocity_parser_)
          {
            this->avg_velocity_parser_->post_avg_velocity ();
            this->avg_velocity ();
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "avg_velocity",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "epsilon" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->epsilon_parser_;

          if (this->epsilon_parser_)
            this->epsilon_parser_->pre ();
        }
        else
        {
          if (this->epsilon_parser_)
          {
            this->epsilon_parser_->post_epsilon ();
            this->epsilon ();
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "epsilon",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "delta_t" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->delta_t_parser_;

          if (this->delta_t_parser_)
            this->delta_t_parser_->pre ();
        }
        else
        {
          if (this->delta_t_parser_)
          {
            this->delta_t_parser_->post_delta_t ();
            this->delta_t ();
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "delta_t",
            ns, n);
        count = 0;
        state = 4UL;
      }
    }
    // Fall through.
    case 4UL:
    {
      if (n == "t_end" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->t_end_parser_;

          if (this->t_end_parser_)
            this->t_end_parser_->pre ();
        }
        else
        {
          if (this->t_end_parser_)
          {
            this->t_end_parser_->post_t_end ();
            this->t_end ();
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "t_end",
            ns, n);
        count = 0;
        state = 5UL;
      }
    }
    // Fall through.
    case 5UL:
    {
      if (n == "sigma" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->sigma_parser_;

          if (this->sigma_parser_)
            this->sigma_parser_->pre ();
        }
        else
        {
          if (this->sigma_parser_)
          {
            this->sigma_parser_->post_sigma ();
            this->sigma ();
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "sigma",
            ns, n);
        count = 0;
        state = 6UL;
      }
    }
    // Fall through.
    case 6UL:
    {
      if (n == "r_cutoff" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->r_cutoff_parser_;

          if (this->r_cutoff_parser_)
            this->r_cutoff_parser_->pre ();
        }
        else
        {
          if (this->r_cutoff_parser_)
          {
            this->r_cutoff_parser_->post_r_cutoff ();
            this->r_cutoff ();
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "r_cutoff",
            ns, n);
        count = 0;
        state = 7UL;
      }
    }
    // Fall through.
    case 7UL:
    {
      if (n == "domain_size_l" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->domain_size_l_parser_;

          if (this->domain_size_l_parser_)
            this->domain_size_l_parser_->pre ();
        }
        else
        {
          if (this->domain_size_l_parser_)
          {
            this->domain_size_l_parser_->post_domain_size_l ();
            this->domain_size_l ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "domain_size_l",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for input_boundary_options_pskel.
//
bool input_boundary_options_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &input_boundary_options_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool input_boundary_options_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void input_boundary_options_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void input_boundary_options_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void input_boundary_options_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "b1" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b1_parser_;

          if (this->b1_parser_)
            this->b1_parser_->pre ();
        }
        else
        {
          if (this->b1_parser_)
          {
            this->b1 (this->b1_parser_->post_string ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b1",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "b2" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b2_parser_;

          if (this->b2_parser_)
            this->b2_parser_->pre ();
        }
        else
        {
          if (this->b2_parser_)
          {
            this->b2 (this->b2_parser_->post_string ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b2",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "b3" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b3_parser_;

          if (this->b3_parser_)
            this->b3_parser_->pre ();
        }
        else
        {
          if (this->b3_parser_)
          {
            this->b3 (this->b3_parser_->post_string ());
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b3",
            ns, n);
        count = 0;
        state = 4UL;
      }
    }
    // Fall through.
    case 4UL:
    {
      if (n == "b4" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b4_parser_;

          if (this->b4_parser_)
            this->b4_parser_->pre ();
        }
        else
        {
          if (this->b4_parser_)
          {
            this->b4 (this->b4_parser_->post_string ());
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b4",
            ns, n);
        count = 0;
        state = 5UL;
      }
    }
    // Fall through.
    case 5UL:
    {
      if (n == "b5" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b5_parser_;

          if (this->b5_parser_)
            this->b5_parser_->pre ();
        }
        else
        {
          if (this->b5_parser_)
          {
            this->b5 (this->b5_parser_->post_string ());
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b5",
            ns, n);
        count = 0;
        state = 6UL;
      }
    }
    // Fall through.
    case 6UL:
    {
      if (n == "b6" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b6_parser_;

          if (this->b6_parser_)
            this->b6_parser_->pre ();
        }
        else
        {
          if (this->b6_parser_)
          {
            this->b6 (this->b6_parser_->post_string ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b6",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for cuboid_input_parameters_pskel.
//
bool cuboid_input_parameters_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "h" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &cuboid_input_parameters_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "h",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool cuboid_input_parameters_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void cuboid_input_parameters_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void cuboid_input_parameters_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "h");

  this->v_state_stack_.pop ();
}

void cuboid_input_parameters_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "h" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->h_parser_;

          if (this->h_parser_)
            this->h_parser_->pre ();
        }
        else
        {
          if (this->h_parser_)
          {
            this->h_parser_->post_h ();
            this->h ();
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "h",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "m" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->m_parser_;

          if (this->m_parser_)
            this->m_parser_->pre ();
        }
        else
        {
          if (this->m_parser_)
          {
            this->m_parser_->post_m ();
            this->m ();
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "x1" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x1_parser_;

          if (this->x1_parser_)
            this->x1_parser_->pre ();
        }
        else
        {
          if (this->x1_parser_)
          {
            this->x1_parser_->post_x1 ();
            this->x1 ();
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x1",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "x2" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x2_parser_;

          if (this->x2_parser_)
            this->x2_parser_->pre ();
        }
        else
        {
          if (this->x2_parser_)
          {
            this->x2_parser_->post_x2 ();
            this->x2 ();
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x2",
            ns, n);
        count = 0;
        state = 4UL;
      }
    }
    // Fall through.
    case 4UL:
    {
      if (n == "v1" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->v1_parser_;

          if (this->v1_parser_)
            this->v1_parser_->pre ();
        }
        else
        {
          if (this->v1_parser_)
          {
            this->v1_parser_->post_v1 ();
            this->v1 ();
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "v1",
            ns, n);
        count = 0;
        state = 5UL;
      }
    }
    // Fall through.
    case 5UL:
    {
      if (n == "v2" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->v2_parser_;

          if (this->v2_parser_)
            this->v2_parser_->pre ();
        }
        else
        {
          if (this->v2_parser_)
          {
            this->v2_parser_->post_v2 ();
            this->v2 ();
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "v2",
            ns, n);
        count = 0;
        state = 6UL;
      }
    }
    // Fall through.
    case 6UL:
    {
      if (n == "N1" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->N1_parser_;

          if (this->N1_parser_)
            this->N1_parser_->pre ();
        }
        else
        {
          if (this->N1_parser_)
          {
            this->N1_parser_->post_N1 ();
            this->N1 ();
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "N1",
            ns, n);
        count = 0;
        state = 7UL;
      }
    }
    // Fall through.
    case 7UL:
    {
      if (n == "N2" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->N2_parser_;

          if (this->N2_parser_)
            this->N2_parser_->pre ();
        }
        else
        {
          if (this->N2_parser_)
          {
            this->N2_parser_->post_N2 ();
            this->N2 ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "N2",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for sphere_input_parameters_pskel.
//
bool sphere_input_parameters_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "h" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &sphere_input_parameters_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "h",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool sphere_input_parameters_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void sphere_input_parameters_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void sphere_input_parameters_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "h");

  this->v_state_stack_.pop ();
}

void sphere_input_parameters_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "h" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->h_parser_;

          if (this->h_parser_)
            this->h_parser_->pre ();
        }
        else
        {
          if (this->h_parser_)
          {
            this->h_parser_->post_h ();
            this->h ();
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "h",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "dimension" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->dimension_parser_;

          if (this->dimension_parser_)
            this->dimension_parser_->pre ();
        }
        else
        {
          if (this->dimension_parser_)
          {
            this->dimension_parser_->post_dimension ();
            this->dimension ();
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "dimension",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "m" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->m_parser_;

          if (this->m_parser_)
            this->m_parser_->pre ();
        }
        else
        {
          if (this->m_parser_)
          {
            this->m_parser_->post_m ();
            this->m ();
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "m",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "x_center" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_center_parser_;

          if (this->x_center_parser_)
            this->x_center_parser_->pre ();
        }
        else
        {
          if (this->x_center_parser_)
          {
            this->x_center_parser_->post_x_center ();
            this->x_center ();
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x_center",
            ns, n);
        count = 0;
        state = 4UL;
      }
    }
    // Fall through.
    case 4UL:
    {
      if (n == "v" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->v_parser_;

          if (this->v_parser_)
            this->v_parser_->pre ();
        }
        else
        {
          if (this->v_parser_)
          {
            this->v_parser_->post_v ();
            this->v ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "v",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for dimension_pskel.
//
bool dimension_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &dimension_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool dimension_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void dimension_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void dimension_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void dimension_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value (this->value_parser_->post_float ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for avg_velocity_pskel.
//
bool avg_velocity_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &avg_velocity_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool avg_velocity_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void avg_velocity_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void avg_velocity_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void avg_velocity_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value (this->value_parser_->post_float ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for epsilon_pskel.
//
bool epsilon_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &epsilon_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool epsilon_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void epsilon_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void epsilon_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void epsilon_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value (this->value_parser_->post_float ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for delta_t_pskel.
//
bool delta_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &delta_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool delta_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void delta_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void delta_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void delta_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value (this->value_parser_->post_float ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for t_end_pskel.
//
bool t_end_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &t_end_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool t_end_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void t_end_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void t_end_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void t_end_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value (this->value_parser_->post_float ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for sigma_pskel.
//
bool sigma_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &sigma_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool sigma_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void sigma_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void sigma_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void sigma_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value (this->value_parser_->post_float ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for r_cutoff_pskel.
//
bool r_cutoff_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &r_cutoff_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool r_cutoff_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void r_cutoff_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void r_cutoff_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void r_cutoff_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value (this->value_parser_->post_float ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for domain_size_l_pskel.
//
bool domain_size_l_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &domain_size_l_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool domain_size_l_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void domain_size_l_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void domain_size_l_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void domain_size_l_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            this->x (this->x_parser_->post_short ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            this->y (this->y_parser_->post_byte ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            this->z (this->z_parser_->post_byte ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for h_pskel.
//
bool h_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &h_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool h_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void h_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void h_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void h_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value (this->value_parser_->post_float ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for m_pskel.
//
bool m_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &m_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool m_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void m_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void m_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void m_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value (this->value_parser_->post_float ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for x1_pskel.
//
bool x1_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &x1_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool x1_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void x1_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void x1_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void x1_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            this->x (this->x_parser_->post_byte ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            this->y (this->y_parser_->post_byte ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            this->z (this->z_parser_->post_byte ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for x2_pskel.
//
bool x2_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &x2_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool x2_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void x2_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void x2_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void x2_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            this->x (this->x_parser_->post_byte ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            this->y (this->y_parser_->post_byte ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            this->z (this->z_parser_->post_byte ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for v1_pskel.
//
bool v1_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &v1_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool v1_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void v1_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void v1_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void v1_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            this->x (this->x_parser_->post_byte ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            this->y (this->y_parser_->post_byte ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            this->z (this->z_parser_->post_byte ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for v2_pskel.
//
bool v2_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &v2_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool v2_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void v2_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void v2_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void v2_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            this->x (this->x_parser_->post_byte ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            this->y (this->y_parser_->post_byte ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            this->z (this->z_parser_->post_byte ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for N1_pskel.
//
bool N1_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &N1_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool N1_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void N1_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void N1_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void N1_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            this->x (this->x_parser_->post_byte ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            this->y (this->y_parser_->post_byte ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            this->z (this->z_parser_->post_byte ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for N2_pskel.
//
bool N2_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &N2_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool N2_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void N2_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void N2_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void N2_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            this->x (this->x_parser_->post_byte ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            this->y (this->y_parser_->post_byte ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            this->z (this->z_parser_->post_byte ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for x_center_pskel.
//
bool x_center_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &x_center_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool x_center_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void x_center_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void x_center_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void x_center_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            this->x (this->x_parser_->post_byte ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            this->y (this->y_parser_->post_byte ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            this->z (this->z_parser_->post_byte ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for v_pskel.
//
bool v_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &v_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool v_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void v_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void v_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void v_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name (this->name_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            this->x (this->x_parser_->post_byte ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            this->y (this->y_parser_->post_byte ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            this->z (this->z_parser_->post_byte ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Character validation functions for N2_pskel.
//
bool N2_pskel::
_characters_impl (const ::xml_schema::ro_string& s)
{
  this->_any_characters (s);
  return true;
}

#include "xsd/cxx/post.hxx"

// Begin epilogue.
//
//
// End epilogue.

