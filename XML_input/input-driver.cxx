// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "input-pskel.hxx"

#include <iostream>
#include <list>
#include <algorithm>

/**

 */

class input_pimpl: public input_pskel
{
private:
    std::array<int,3> x1;
    std::array<int,3> x2;
    std::array<int,3> v1;
    std::array<int,3> v2;
    std::array<int,3> n1;
    std::array<int,3> n2;
    std::array<int,3> domain_size_L;
    std::int8_t h;
    std::int8_t e;
    std::int8_t m;
    std::int8_t delta_t;
    std::int8_t t_end;
    std::int8_t r_cutoff;




public:
    virtual void
    vector_parameters (const std::array<int,3>& g)
    {
        std::cout << "Appended following parameters:" << std::endl;
    }

    virtual void
    value_parameters (const std::int8_t& n)
    {
        std::list<int> list = {h,e,m,delta_t,t_end,r_cutoff};
        std::for_each(list.begin(), list.end(), [](const int n) {

            std::cout << "Appended following parameter : " << n << std::endl;

        });
        std::cout << '\n';


    }


};

using namespace std;

int
main (int argc, char* argv[])
{
  if (argc != 2)
  {
    std::cerr << "usage: " << argv[0] << " file.xml" << std::endl;
    return 1;
  }

  try
  {
    // Instantiate individual parsers.
    //
    ::input_pskel input_p;
    ::vector_parameters_pskel vector_parameters_p;
    ::param_pskel param_p;
    ::xml_schema::string_pimpl string_p;
    ::value_parameters_pskel value_parameters_p;
    ::param1_pskel param1_p;
    ::xml_schema::float_pimpl float_p;

    // Connect the parsers together.
    //
    input_p.parsers (vector_parameters_p,
                     value_parameters_p);

    vector_parameters_p.parsers (param_p);

    param_p.parsers (string_p,
                     string_p);

    value_parameters_p.parsers (param1_p);

    param1_p.parsers (float_p,
                      string_p);

    // Parse the XML document.
    //
    ::xml_schema::document doc_p (input_p, "input");

    input_p.pre ();
    doc_p.parse (argv[1]);
    input_p.post_input ();
  }
  catch (const ::xml_schema::exception& e)
  {
    std::cerr << e << std::endl;
    return 1;
  }
  catch (const std::ios_base::failure&)
  {
    std::cerr << argv[1] << ": error: io failure" << std::endl;
    return 1;
  }
}

