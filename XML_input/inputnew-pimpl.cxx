// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include <iostream>
#include "inputnew-pimpl.hxx"


std::string algorithm_option_, output_file_name_;
unsigned char write_frequency_, log_level_, x_, y_, z_;
double value_;
std::string b1_, b2_, b3_, b4_, b5_, b6_;



// parameters_pimpl
//

void param_parse_pimpl::
pre ()
{
}

void param_parse_pimpl::
algorithm_option (const ::std::string& algorithm_option)
{
    std::cout<<"you are gonna use this algorithm"<<algorithm_option<< std::endl;
    algorithm_option_ = algorithm_option;
}

void param_parse_pimpl::
write_frequency (unsigned char write_frequency)
{
    std::cout<<"we are writing "<<write_frequency<<"output files per iteration" << std::endl;
    write_frequency_ = write_frequency;
}

void param_parse_pimpl::
output_file_name (const ::std::string& output_file_name)
{
    std::cout<<"The output file name is"<<output_file_name<< std::endl;
    output_file_name_ = output_file_name;
}

void param_parse_pimpl::log_level(unsigned char log_level) {
    std::cout<<"The log level is"<<log_level<< std::endl;
    log_level_ = log_level;
}

void param_parse_pimpl::
simulation_parameters ()
{
}

void param_parse_pimpl::
boundaries ()
{
}

void param_parse_pimpl::
cuboid_parameters ()
{
}

void param_parse_pimpl::
sphere_parameters ()
{
}

void param_parse_pimpl::
post_parameters ()
{
}



// simulation_parameters_pimpl
//

void simulation_params_parse_pimpl::
pre ()
{
}

void simulation_params_parse_pimpl::
name ()
{
}

void simulation_params_parse_pimpl::
post_simulation_parameters ()
{
}

// boundaries_pimpl
//

void boundaries_parse_pimpl::
pre ()
{
}

void boundaries_parse_pimpl::
value ()
{
}

void boundaries_parse_pimpl::
post_boundaries ()
{
}

// cuboid_parameters_pimpl
//

void cuboid_parse_pimpl::
pre ()
{
}

void cuboid_parse_pimpl::
name ()
{
}

void cuboid_parse_pimpl::
post_cuboid_parameters ()
{
}

// sphere_parameters_pimpl
//

void sphere_parse_pimpl::
pre ()
{
}

void sphere_parse_pimpl::
name ()
{
}

void sphere_parse_pimpl::
post_sphere_parameters ()
{
}

// name_pimpl
//

void name_parse_pimpl::
pre ()
{
}

void name_parse_pimpl::
x (unsigned char x)
{
    std::cout << "coordinate x: " << x;
     x_ = x;
}

void name_parse_pimpl::
y (unsigned char y)
{
    std::cout << " coordinate y: " << y;
    y_ = y;
}

void name_parse_pimpl::
z (unsigned char z)
{
    std::cout << " coordinate z: " << z;
    z_ = z;
}

void name_parse_pimpl::
value (double value)
{
    std::cout << "value of the param: " << value;
    value_ = value;
}

void name_parse_pimpl::
post_name ()
{
}

// value_pimpl
//

void values_parse_pimpl::
pre ()
{
}

void values_parse_pimpl::
b1 (const ::std::string& b1)
{
    std::cout << b1 << std::endl;
    b1_ = b1;
}

void values_parse_pimpl::
b2 (const ::std::string& b2)
{
    std::cout << b2 << std::endl;
    b2_ = b2;
}

void values_parse_pimpl::
b3 (const ::std::string& b3)
{
    std::cout << b3 << std::endl;
    b3_ = b3;
}

void values_parse_pimpl::
b4 (const ::std::string& b4)
{
    std::cout << b4 << std::endl;
    b4_ = b4;
}

void values_parse_pimpl::
b5 (const ::std::string& b5)
{
    std::cout << b5 << std::endl;
    b5_ = b5;
}

void values_parse_pimpl::
b6 (const ::std::string& b6)
{
    std::cout << b6 << std::endl;
    b6_ = b6;
}

void values_parse_pimpl::
post_value ()
{
}

// name1_parse_pimpl
//

