// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "inputnew-pskel.hxx"

// parameters_pskel
//

void parameters_pskel::
algorithm_option_parser (::xml_schema::string_pskel& p)
{
  this->algorithm_option_parser_ = &p;
}

void parameters_pskel::
write_frequency_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->write_frequency_parser_ = &p;
}

void parameters_pskel::
output_file_name_parser (::xml_schema::string_pskel& p)
{
  this->output_file_name_parser_ = &p;
}

void parameters_pskel::
simulation_parameters_parser (::simulation_parameters_pskel& p)
{
  this->simulation_parameters_parser_ = &p;
}

void parameters_pskel::
boundaries_parser (::boundaries_pskel& p)
{
  this->boundaries_parser_ = &p;
}

void parameters_pskel::
cuboid_parameters_parser (::cuboid_parameters_pskel& p)
{
  this->cuboid_parameters_parser_ = &p;
}

void parameters_pskel::
sphere_parameters_parser (::sphere_parameters_pskel& p)
{
  this->sphere_parameters_parser_ = &p;
}

void parameters_pskel::
parsers (::xml_schema::string_pskel& algorithm_option,
         ::xml_schema::unsigned_byte_pskel& write_frequency,
         ::xml_schema::string_pskel& output_file_name,
         ::simulation_parameters_pskel& simulation_parameters,
         ::boundaries_pskel& boundaries,
         ::cuboid_parameters_pskel& cuboid_parameters,
         ::sphere_parameters_pskel& sphere_parameters)
{
  this->algorithm_option_parser_ = &algorithm_option;
  this->write_frequency_parser_ = &write_frequency;
  this->output_file_name_parser_ = &output_file_name;
  this->simulation_parameters_parser_ = &simulation_parameters;
  this->boundaries_parser_ = &boundaries;
  this->cuboid_parameters_parser_ = &cuboid_parameters;
  this->sphere_parameters_parser_ = &sphere_parameters;
}

parameters_pskel::
parameters_pskel ()
: algorithm_option_parser_ (0),
  write_frequency_parser_ (0),
  output_file_name_parser_ (0),
  simulation_parameters_parser_ (0),
  boundaries_parser_ (0),
  cuboid_parameters_parser_ (0),
  sphere_parameters_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// simulation_parameters_pskel
//

void simulation_parameters_pskel::
name_parser (::name_pskel& p)
{
  this->name_parser_ = &p;
}

void simulation_parameters_pskel::
parsers (::name_pskel& name)
{
  this->name_parser_ = &name;
}

simulation_parameters_pskel::
simulation_parameters_pskel ()
: name_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// boundaries_pskel
//

void boundaries_pskel::
value_parser (::value_pskel& p)
{
  this->value_parser_ = &p;
}

void boundaries_pskel::
parsers (::value_pskel& value)
{
  this->value_parser_ = &value;
}

boundaries_pskel::
boundaries_pskel ()
: value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// cuboid_parameters_pskel
//

void cuboid_parameters_pskel::
name_parser (::name_pskel& p)
{
  this->name_parser_ = &p;
}

void cuboid_parameters_pskel::
parsers (::name_pskel& name)
{
  this->name_parser_ = &name;
}

cuboid_parameters_pskel::
cuboid_parameters_pskel ()
: name_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// sphere_parameters_pskel
//

void sphere_parameters_pskel::
name_parser (::name_pskel& p)
{
  this->name_parser_ = &p;
}

void sphere_parameters_pskel::
parsers (::name_pskel& name)
{
  this->name_parser_ = &name;
}

sphere_parameters_pskel::
sphere_parameters_pskel ()
: name_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// name_pskel
//

void name_pskel::
x_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->x_parser_ = &p;
}

void name_pskel::
y_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->y_parser_ = &p;
}

void name_pskel::
z_parser (::xml_schema::unsigned_byte_pskel& p)
{
  this->z_parser_ = &p;
}

void name_pskel::
value_parser (::xml_schema::decimal_pskel& p)
{
  this->value_parser_ = &p;
}

void name_pskel::
parsers (::xml_schema::unsigned_byte_pskel& x,
         ::xml_schema::unsigned_byte_pskel& y,
         ::xml_schema::unsigned_byte_pskel& z,
         ::xml_schema::decimal_pskel& value)
{
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
  this->value_parser_ = &value;
}

name_pskel::
name_pskel ()
: x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  value_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// value_pskel
//

void value_pskel::
b1_parser (::xml_schema::string_pskel& p)
{
  this->b1_parser_ = &p;
}

void value_pskel::
b2_parser (::xml_schema::string_pskel& p)
{
  this->b2_parser_ = &p;
}

void value_pskel::
b3_parser (::xml_schema::string_pskel& p)
{
  this->b3_parser_ = &p;
}

void value_pskel::
b4_parser (::xml_schema::string_pskel& p)
{
  this->b4_parser_ = &p;
}

void value_pskel::
b5_parser (::xml_schema::string_pskel& p)
{
  this->b5_parser_ = &p;
}

void value_pskel::
b6_parser (::xml_schema::string_pskel& p)
{
  this->b6_parser_ = &p;
}

void value_pskel::
parsers (::xml_schema::string_pskel& b1,
         ::xml_schema::string_pskel& b2,
         ::xml_schema::string_pskel& b3,
         ::xml_schema::string_pskel& b4,
         ::xml_schema::string_pskel& b5,
         ::xml_schema::string_pskel& b6)
{
  this->b1_parser_ = &b1;
  this->b2_parser_ = &b2;
  this->b3_parser_ = &b3;
  this->b4_parser_ = &b4;
  this->b5_parser_ = &b5;
  this->b6_parser_ = &b6;
}

value_pskel::
value_pskel ()
: b1_parser_ (0),
  b2_parser_ (0),
  b3_parser_ (0),
  b4_parser_ (0),
  b5_parser_ (0),
  b6_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// name1_pskel
//

// parameters_pskel
//

void parameters_pskel::
algorithm_option (const ::std::string&)
{
}

void parameters_pskel::
write_frequency (unsigned char)
{
}

void parameters_pskel::
output_file_name (const ::std::string&)
{
}

void parameters_pskel::log_level(unsigned char) {

}

void parameters_pskel::
simulation_parameters ()
{
}

void parameters_pskel::
boundaries ()
{
}

void parameters_pskel::
cuboid_parameters ()
{
}

void parameters_pskel::
sphere_parameters ()
{
}

void parameters_pskel::
post_parameters ()
{
}

// simulation_parameters_pskel
//

void simulation_parameters_pskel::
name ()
{
}

void simulation_parameters_pskel::
post_simulation_parameters ()
{
}

// boundaries_pskel
//

void boundaries_pskel::
value ()
{
}

void boundaries_pskel::
post_boundaries ()
{
}

// cuboid_parameters_pskel
//

void cuboid_parameters_pskel::
name ()
{
}

void cuboid_parameters_pskel::
post_cuboid_parameters ()
{
}

// sphere_parameters_pskel
//

void sphere_parameters_pskel::
name ()
{
}

void sphere_parameters_pskel::
post_sphere_parameters ()
{
}

// name_pskel
//

void name_pskel::
x (unsigned char)
{
}

void name_pskel::
y (unsigned char)
{
}

void name_pskel::
z (unsigned char)
{
}

void name_pskel::
value (double)
{
}

void name_pskel::
post_name ()
{
}

// value_pskel
//

void value_pskel::
b1 (const ::std::string&)
{
}

void value_pskel::
b2 (const ::std::string&)
{
}

void value_pskel::
b3 (const ::std::string&)
{
}

void value_pskel::
b4 (const ::std::string&)
{
}

void value_pskel::
b5 (const ::std::string&)
{
}

void value_pskel::
b6 (const ::std::string&)
{
}

void value_pskel::
post_value ()
{
}

// name1_pskel
//

#include <cassert>

// Element validation and dispatch functions for parameters_pskel.
//
bool parameters_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "algorithm_option" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &parameters_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "algorithm_option",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool parameters_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void parameters_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void parameters_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "algorithm_option");

  this->v_state_stack_.pop ();
}

void parameters_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "algorithm_option" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->algorithm_option_parser_;

          if (this->algorithm_option_parser_)
            this->algorithm_option_parser_->pre ();
        }
        else
        {
          if (this->algorithm_option_parser_)
          {
            this->algorithm_option (this->algorithm_option_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "algorithm_option",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "write_frequency" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->write_frequency_parser_;

          if (this->write_frequency_parser_)
            this->write_frequency_parser_->pre ();
        }
        else
        {
          if (this->write_frequency_parser_)
          {
            this->write_frequency (this->write_frequency_parser_->post_unsigned_byte ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "write_frequency",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "output_file_name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->output_file_name_parser_;

          if (this->output_file_name_parser_)
            this->output_file_name_parser_->pre ();
        }
        else
        {
          if (this->output_file_name_parser_)
          {
            this->output_file_name (this->output_file_name_parser_->post_string ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "output_file_name",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "simulation_parameters" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->simulation_parameters_parser_;

          if (this->simulation_parameters_parser_)
            this->simulation_parameters_parser_->pre ();
        }
        else
        {
          if (this->simulation_parameters_parser_)
          {
            this->simulation_parameters_parser_->post_simulation_parameters ();
            this->simulation_parameters ();
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "simulation_parameters",
            ns, n);
        count = 0;
        state = 4UL;
      }
    }
    // Fall through.
    case 4UL:
    {
      if (n == "boundaries" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->boundaries_parser_;

          if (this->boundaries_parser_)
            this->boundaries_parser_->pre ();
        }
        else
        {
          if (this->boundaries_parser_)
          {
            this->boundaries_parser_->post_boundaries ();
            this->boundaries ();
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "boundaries",
            ns, n);
        count = 0;
        state = 5UL;
      }
    }
    // Fall through.
    case 5UL:
    {
      if (n == "cuboid_parameters" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->cuboid_parameters_parser_;

          if (this->cuboid_parameters_parser_)
            this->cuboid_parameters_parser_->pre ();
        }
        else
        {
          if (this->cuboid_parameters_parser_)
          {
            this->cuboid_parameters_parser_->post_cuboid_parameters ();
            this->cuboid_parameters ();
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "cuboid_parameters",
            ns, n);
        count = 0;
        state = 6UL;
      }
    }
    // Fall through.
    case 6UL:
    {
      if (n == "sphere_parameters" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->sphere_parameters_parser_;

          if (this->sphere_parameters_parser_)
            this->sphere_parameters_parser_->pre ();
        }
        else
        {
          if (this->sphere_parameters_parser_)
          {
            this->sphere_parameters_parser_->post_sphere_parameters ();
            this->sphere_parameters ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "sphere_parameters",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}



// Element validation and dispatch functions for simulation_parameters_pskel.
//
bool simulation_parameters_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &simulation_parameters_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool simulation_parameters_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void simulation_parameters_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void simulation_parameters_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void simulation_parameters_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name_parser_->post_name ();
            this->name ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for boundaries_pskel.
//
bool boundaries_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "value" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &boundaries_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool boundaries_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void boundaries_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void boundaries_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "value");

  this->v_state_stack_.pop ();
}

void boundaries_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value_parser_->post_value ();
            this->value ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "value",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for cuboid_parameters_pskel.
//
bool cuboid_parameters_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &cuboid_parameters_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool cuboid_parameters_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void cuboid_parameters_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void cuboid_parameters_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void cuboid_parameters_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name_parser_->post_name ();
            this->name ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for sphere_parameters_pskel.
//
bool sphere_parameters_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "name" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &sphere_parameters_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool sphere_parameters_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void sphere_parameters_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void sphere_parameters_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "name");

  this->v_state_stack_.pop ();
}

void sphere_parameters_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "name" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

          if (this->name_parser_)
            this->name_parser_->pre ();
        }
        else
        {
          if (this->name_parser_)
          {
            this->name_parser_->post_name ();
            this->name ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "name",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for name_pskel.
//
bool name_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "x" && ns.empty ())
        s = 0UL;
      else if (n == "y" && ns.empty ())
        s = 1UL;
      else if (n == "z" && ns.empty ())
        s = 2UL;
      else if (n == "value" && ns.empty ())
        s = 3UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &name_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool name_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void name_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void name_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void name_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            this->x (this->x_parser_->post_unsigned_byte ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            this->y (this->y_parser_->post_unsigned_byte ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            this->z (this->z_parser_->post_unsigned_byte ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "value" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

          if (this->value_parser_)
            this->value_parser_->pre ();
        }
        else
        {
          if (this->value_parser_)
          {
            this->value (this->value_parser_->post_decimal ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for value_pskel.
//
bool value_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "b1" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &value_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "b1",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool value_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void value_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void value_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "b1");

  this->v_state_stack_.pop ();
}

void value_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "b1" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b1_parser_;

          if (this->b1_parser_)
            this->b1_parser_->pre ();
        }
        else
        {
          if (this->b1_parser_)
          {
            this->b1 (this->b1_parser_->post_string ());
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b1",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "b2" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b2_parser_;

          if (this->b2_parser_)
            this->b2_parser_->pre ();
        }
        else
        {
          if (this->b2_parser_)
          {
            this->b2 (this->b2_parser_->post_string ());
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b2",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "b3" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b3_parser_;

          if (this->b3_parser_)
            this->b3_parser_->pre ();
        }
        else
        {
          if (this->b3_parser_)
          {
            this->b3 (this->b3_parser_->post_string ());
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b3",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "b4" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b4_parser_;

          if (this->b4_parser_)
            this->b4_parser_->pre ();
        }
        else
        {
          if (this->b4_parser_)
          {
            this->b4 (this->b4_parser_->post_string ());
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b4",
            ns, n);
        count = 0;
        state = 4UL;
      }
    }
    // Fall through.
    case 4UL:
    {
      if (n == "b5" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b5_parser_;

          if (this->b5_parser_)
            this->b5_parser_->pre ();
        }
        else
        {
          if (this->b5_parser_)
          {
            this->b5 (this->b5_parser_->post_string ());
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b5",
            ns, n);
        count = 0;
        state = 5UL;
      }
    }
    // Fall through.
    case 5UL:
    {
      if (n == "b6" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->b6_parser_;

          if (this->b6_parser_)
            this->b6_parser_->pre ();
        }
        else
        {
          if (this->b6_parser_)
          {
            this->b6 (this->b6_parser_->post_string ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "b6",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Character validation functions for boundaries_pskel.
//
bool boundaries_pskel::
_characters_impl (const ::xml_schema::ro_string& s)
{
  this->_any_characters (s);
  return true;
}

// Character validation functions for name_pskel.
//
bool name_pskel::
_characters_impl (const ::xml_schema::ro_string& s)
{
  this->_any_characters (s);
  return true;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

